@************************************************************************************************************************************************
    Written by Sanchita on 13/01/2025 for Modern Retail - Current Stock module
*************************************************************************************************************************************************@

@using System.Web.UI.WebControls
@using DevExpress.Web;
@using DevExpress.Web.Mvc;

@using ModernRetail.Models;
@model ModernRetail.Models.CurrentStockModel
@{
    ViewBag.Title = "CURRENT STOCK";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" src="~/Scripts/globalize.js"></script>
<script src="~/Scripts/cultures/globalize.cultures.js"></script>

<link href="~/assests/pluggins/LightBox/lightbox.css" rel="stylesheet" />
<script src="~/assests/pluggins/LightBox/lightbox.js"></script>

<script src="~/Scripts/chosen/chosen.jquery.min.js"></script>
<link href="~/Scripts/chosen/chosen.min.css" rel="stylesheet" />
<link href="~/Content/media.css" rel="stylesheet" />
<script src="~/Scripts/SearchPopup.js"></script>
<script src="~/Scripts/SearchMultiPopup.js"></script>


<style>
    #grid .dxgvHSDC > div, #grid .dxgvCSD {
        width: 100% !important;
    }

    .hide {
        display: none;
    }

    .full-grid, #grid {
        width: 100% !important;
    }

    #gridStockProductEntryList, #gridStockProductEntryList > tbody > tr > td > div.dxgvHSDC > div {
        width: 100% !important;
    }

    .dxgvControl_PlasticBlue td.dxgvBatchEditModifiedCell_PlasticBlue {
        background: white !important;
    }
</style>
<style>
    .dxgvControl_PlasticBlue td.dxgvBatchEditModifiedCell_PlasticBlue {
        background: #fff;
    }

    .dxgvStatusBar_PlasticBlue {
        display: none;
    }

    .modal-header {
        padding: 8px;
        background: #094e8c;
        border-radius: 8px 8px 0 0;
    }

    button.close {
        color: #fff;
        font-weight: 300;
        opacity: .5;
    }

    .close:hover, .close:focus {
        color: #fff;
        opacity: 1;
    }

    .modal-content {
        border-radius: 10px;
    }

    .modal-footer {
        padding: 15px 10px 15px;
        border-top: 1px solid #c0c0c0;
    }


    .dxgvLoadingPanel_PlasticBlue {
        left: 42% !important;
    }
    /*Rev 2.0*/
    #gridUserList {
        width: 100% !important;
        max-width: 100% !important;
    }
    /*Rev end 2.0*/

    /*Rev 3.0*/

    #BranchGridLookup {
        min-height: 34px;
        border-radius: 5px;
    }

    .dxeButtonEditButton_PlasticBlue {
        background: #094e8c !important;
        border-radius: 4px !important;
        padding: 0 4px !important;
    }

    .chosen-container-single .chosen-single div {
        background: #094e8c;
        color: #fff;
        border-radius: 4px;
        height: 30px;
        top: 1px;
        right: 1px;
        /*position:relative;*/
    }

        .chosen-container-single .chosen-single div b {
            display: none;
        }

        .chosen-container-single .chosen-single div::after {
            content: '<';
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
        }

    .chosen-container-active.chosen-with-drop .chosen-single div {
        background: #094e8c;
        color: #fff;
    }

        .chosen-container-active.chosen-with-drop .chosen-single div::after {
            transform: rotate(90deg);
            right: 5px;
        }

    .calendar-icon {
        position: absolute;
        bottom: 8px;
        right: 20px;
        z-index: 0;
        cursor: pointer;
    }

    #dtFrom_B-1, #dtTo_B-1, #dtCurrentStockDate_B-1, #dtMfgDate_B-1, #dtExpDate_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img,
        #dtCurrentStockDate_B-1 #dtCurrentStockDate_B-1Img,
        #dtMfgDate_B-1 #dtMfgDate_B-1Img,
        #dtExpDate_B-1 #dtExpDate_B-1Img {
            display: none;
        }

    #dtFrom_I, #dtTo_I, #dtCurrentStockDate_I, #dtMfgDate_I, #dtExpDate_I {
        background: transparent;
    }

    . /*for-cust-icon {
        position: relative;
        z-index: 1;
        width: 50%;
    }*/
    .date-select .form-control {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #ddlState, #ddlPartyType, #divoutletStatus, #slmonth, #slyear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .h-branch-select {
        position: relative;
    }

        .h-branch-select::after {
            content: '<';
            position: absolute;
            top: 33px;
            right: 13px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

    .multiselect.dropdown-toggle {
        text-align: left;
    }

    .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .whclass.selectH {
        padding-right: 30px;
    }

    #ddlShowReport:focus-visible {
        box-shadow: none;
        outline: none;
        border: 1px solid #164f93;
    }

    #ddlShowReport:focus {
        border: 1px solid #164f93;
    }

    .whclass.selectH:focus-visible {
        outline: none;
    }

    .whclass.selectH:focus {
        border: 1px solid #164f93;
    }

    .dxeButtonEdit_PlasticBlue {
        border: 1px Solid #ccc;
    }

    .chosen-container-single .chosen-single {
        border: 1px solid #ccc;
        background: #fff;
        box-shadow: none;
    }

    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #175396;
    }

    label {
        font-weight: 500;
    }

    .dxgvHeader_PlasticBlue {
        background: #164f94;
    }

    .dxgvSelectedRow_PlasticBlue td.dxgv {
        color: #fff;
    }

    .dxeCalendarHeader_PlasticBlue {
        background: #185598;
    }

    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
    .dxbButton_PlasticBlue,
    .dxeCalendar_PlasticBlue,
    .dxeEditArea_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        /*font-weight: 500;*/
    }

    .btnPadding .btn {
        padding: 7px 14px !important;
        border-radius: 4px;
    }

    .btnPadding {
        padding-top: 24px !important;
    }

    .dxeButtonEdit_PlasticBlue {
        border-radius: 5px;
        height: 34px;
    }

    #dtFrom, #dtTo, #dtCurrentStockDate, #dtMfgDate, #dtExpDate {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
        background: #165092;
        vertical-align: middle;
        font-weight: 500;
    }

    /*#refreshgrid {
        background: #e5e5e5;
        padding: 0 10px;
        margin-top: 15px;
        border-radius: 8px;
    }*/

    .styled-checkbox {
        position: absolute;
        opacity: 0;
        z-index: 1;
    }

        .styled-checkbox + label {
            position: relative;
            /*cursor: pointer;*/
            padding: 0;
            margin-bottom: 0 !important;
        }

            .styled-checkbox + label:before {
                content: "";
                margin-right: 6px;
                display: inline-block;
                vertical-align: text-top;
                width: 16px;
                height: 16px;
                /*background: #d7d7d7;*/
                margin-top: 2px;
                border-radius: 2px;
                border: 1px solid #c5c5c5;
            }

        .styled-checkbox:hover + label:before {
            background: #094e8c;
        }


        .styled-checkbox:checked + label:before {
            background: #094e8c;
        }

        .styled-checkbox:disabled + label {
            color: #b8b8b8;
            cursor: auto;
        }

            .styled-checkbox:disabled + label:before {
                box-shadow: none;
                background: #ddd;
            }

        .styled-checkbox:checked + label:after {
            content: "";
            position: absolute;
            left: 3px;
            top: 9px;
            background: white;
            width: 2px;
            height: 2px;
            box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
            transform: rotate(45deg);
        }

    #dtstate {
        padding-right: 8px;
    }

    .pmsModal .modal-header {
        /*background: #094e8c !important;
    background-image: none !important;*/
        padding: 11px 20px;
        border: none;
        border-radius: 15px 15px 0 0 !important;
        /*color: #fff;*/
        /*background: linear-gradient(to right, #1f5fbf, #11998e) !important;*/
    }

    .pmsModal .modal-content {
        border: none;
        background: linear-gradient(1deg, #cff3ff, #ffffff);
    }

    /*.pmsModal .modal-header .modal-title {
        font-size: 14px;
    }*/

    .pmsModal .modal-header .modal-title {
        font-size: 16px !important;
        color: #111;
        font-size: 24px;
    }

    .pmsModal .modal-header {
        background: transparent !important;
        margin-bottom: 10px;
        border-bottom: 1px solid #d5d5d5;
    }

    .close {
        font-size: 34px;
        opacity: .8;
    }

    button.close {
        color: #111 !important;
        font-weight: 400 !important;
        opacity: .8 !important;
        font-size: 32px !important;
    }

    .pmsModal .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }

    #EmployeeTable {
        margin-top: 10px;
    }

        #EmployeeTable table tr th {
            padding: 5px 10px;
        }

    .dynamicPopupTbl {
        font-family: 'Poppins', sans-serif !important;
    }

        .dynamicPopupTbl > tbody > tr > td,
        #EmployeeTable table tr th {
            font-family: 'Poppins', sans-serif !important;
            font-size: 12px;
        }

    .w150 {
        width: 160px;
    }

    .eqpadtbl > tbody > tr > td:not(:last-child) {
        padding-right: 20px;
    }

    #dtFrom_B-1, #dtTo_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img {
            display: none;
        }

    #dtFrom_I, #dtTo_I {
        background: transparent;
    }

    .for-cust-icon {
        position: relative;
        z-index: 1;
    }

    .pad-md-18 {
        padding-top: 24px;
    }

    .open .dropdown-toggle.btn-default {
        background: transparent !important;
    }

    .input-group-btn .multiselect-clear-filter {
        height: 32px;
        border-radius: 0 4px 4px 0;
    }

    .btn .caret {
        display: none;
    }

    .iminentSpan button.multiselect.dropdown-toggle {
        height: 34px;
    }

    .col-lg-2 {
        padding-left: 8px;
        padding-right: 8px;
    }

    select:not(.btn) {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .dxgvControl_PlasticBlue a {
        margin: 0 3px;
    }

    .dxeButtonDisabled_PlasticBlue {
        background: #ababab !important;
        cursor:not-allowed;
    }

    .red {
        color: red;
    }

    .linerHd {
        background: #4e8fcf !important;
    }

    /*Rev end 3.0*/
    /*Rev 4.0*/
    #popup_message {
        padding-left: 0 !important;
        text-align: center !important;
    }

    #popup_panel {
        margin: 14px 0 5px;
    }

    #popup_ok, #popup_cancel {
        border-radius: 4px !important;
    }
    /*Rev end 4.0*/
    /*Rev 5.0*/
    #gridUserList_DXPagerTop_PSP, #gridUserList_DXPagerBottom_PSP {
        right: 36px !important;
        left: auto !important;
    }
    /*Rev end 5.0*/


    .add-btn .btn-icon {
        border-radius: 50px;
        width: 20px;
        height: 20px;
        display: inline-block;
        background: #fff;
        line-height: 21px;
        margin-right: 5px;
    }

    .add-btn {
        transition: all .4s;
    }

        .add-btn:hover {
            color: #fff;
            background-color: #0e4f23;
            border-color: #0e4f23;
        }

        .add-btn .btn-icon i {
            color: #238945;
        }

    .add-btn {
        background-color: #238945;
        margin-right: 5px;
    }

    .btn {
        border-radius: 8px;
        height: 34px;
        padding-left: 12px;
        padding-right: 12px;
        color: #fff;
    }

        .btn:active, .btn:hover, .btn:focus {
            color: #fff !important;
        }

    .buttons-alignment {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .show-btn .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 21px;
        margin-right: 5px;
        color: #054682;
    }

    .show-btn {
        background: #054682;
        transition: all .4s;
        margin-right: 5px;
    }

        .show-btn:hover {
            background: #072743;
        }

    .btn-cancel {
        background-color: #DC0505;
        color: #fff;
    }

    .btn-export {
        background: #e17134;
        color: #fff;
    }

        .btn-export:hover {
            background: #a24716 !important;
            color: #fff;
        }

    .swal2-confirm.swal2-styled {
        border-radius: 8px !important;
    }

    .swal2-styled {
        border-radius: 12px !important;
        padding: 8px 20px !important;
        color: #fff !important;
        font-size: 14px !important;
    }

    .swal2-html-container {
        margin-top: 5px !important;
    }

    div:where(.swal2-container) button:where(.swal2-styled):not([disabled]) {
        width: 90px !important;
        border-radius: 8px !important;
    }

    div:where(.swal2-container).swal2-backdrop-show, div:where(.swal2-container).swal2-noanimation {
        background: rgb(0 0 0 / 50%) !important;
    }

    div:where(.swal2-container).swal2-center > .swal2-popup {
        background: linear-gradient(1deg, #cff3ff, #ffffff);
    }


    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip {
        visibility: hidden;
        /*width: 140px;*/
        background-color: #0d8f24;
        color: #fff;
        text-align: center;
        border-radius: 10px;
        padding: 8px 10px;
        position: absolute;
        z-index: 99;
        bottom: 130%;
        left: 42%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

        .tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -10px;
            border-width: 10px;
            border-style: solid;
            border-color: #0d8f24 transparent transparent transparent;
        }

    .tooltip-container:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        /*overflow: visible;*/
    }

    .save-btn .btn-icon, .cancel-catg .btn-icon, .saveicon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 20px;
        margin-right: 5px;
    }

        .save-btn .btn-icon img, .saveicon img {
            color: #238945;
            width: 14px;
        }



    .cancel-catg, .save-btn {
        transition: all .3s ease-in-out;
    }

        .cancel-catg .btn-icon img {
            color: #DC0505;
            width: 16px;
        }

        .cancel-catg:hover {
            transform: scale(1.1);
        }

        .save-btn:hover {
            transform: scale(1.1);
        }

    .modal-footer .btn + .btn {
        margin-bottom: 0;
        margin-left: 5px;
    }

    .cancel-catg {
        margin-right: 5px;
    }

    .close:hover, .close:focus {
        color: #111 !important;
    }

    #NEWVISIT, #REVISIT, #ORDERAMOUNT, #COLLECTION, #ORDERQTY {
        padding: 0;
    }

        #NEWVISIT input, #REVISIT input, #ORDERAMOUNT input, #COLLECTION input, #ORDERQTY input {
            height: 100%;
            padding: 0 5px;
        }

    table.dataTable thead th {
        padding: 6px 9px;
    }

    .dxgvControl_PlasticBlue a {
        margin: 5px 3px;
        display: inline-block;
    }

    .pmsModal .modal-body {
        padding: 10px 20px;
    }

    .pmsModal .modal-footer {
        padding: 10px 20px;
    }

    .dataTables_length label {
        display: flex;
        align-items: center;
    }

    .dataTables_filter input {
        /*display: block;*/
        width: 60%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.428571429;
        color: #555;
        vertical-align: middle;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .dataTables_length select {
        margin-left: 5px;
        margin-right: 5px;
    }


    .dataTables_wrapper .dataTables_paginate .paginate_button {
        padding: 0;
    }

    .pagination > li > a, .pagination > li > span {
        padding: 4px 8px;
    }

    div.dataTables_wrapper div.dataTables_info {
        padding-top: 10px;
    }

    .crossBtnN {
        /*color: #fff;*/
        cursor: pointer;
    }

    div.dataTables_wrapper div.dataTables_info {
        font-size: 12px;
    }

    #GridLevellistModel .modal-dialog {
        width: 45%;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        outline: none;
        border: none;
    }

    .dynamicPopupTbl > tbody > tr > td input {
        width: 100%;
        white-space: break-spaces;
    }

    #PartyTypeGridLookup_ET > tbody > tr > td: first - child {
        display: none;
    }
</style>

<link href="/Scripts/pluggins/multiselect/bootstrap-multiselect.css" rel="stylesheet" />
<script src="/Scripts/pluggins/multiselect/bootstrap-multiselect.js"></script>

<link href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" rel="stylesheet" />
<script src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/fixedcolumns/3.3.0/js/dataTables.fixedColumns.min.js"></script>
@*<script src="/Scripts/SearchPopupDatatable.js"></script>*@
<link href="/assests/css/SearchPopup.css" rel="stylesheet" />


<style>
    #ddlBranch + div ul.multiselect-container {
        max-height: 250px;
        overflow-y: auto;
    }

    .multiselect.dropdown-toggle {
        text-align: left;
    }

    .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .multiselect-container.dropdown-menu {
        right: 0 !important;
        left: auto;
        min-width: 275px;
    }

    .iminentSpan .multiselect-container.dropdown-menu {
        right: auto !important;
        left: 0;
        min-width: 340px;
        margin-top: -12px;
    }

    .multiselect-container > li > a {
        padding: 5px 0;
    }

        .multiselect-container > li > a input[type="checkbox"] {
            transform: translateY(3px);
        }

    .multiselect-container > li.active > a {
        background: transparent !important;
        color: #333;
    }

        .multiselect-container > li > a:hover, .multiselect-container > li.active > a:hover {
            background: #f3f3f3 !important;
            color: #333 !important;
        }

    .multiselect-item.multiselect-filter {
        padding-bottom: 6px;
        border-bottom: 1px solid #ccc;
    }

        .multiselect-item.multiselect-filter .form-control.multiselect-search {
            height: 32px;
        }

        .multiselect-item.multiselect-filter .input-group-addon {
            background: #41a8f1;
            color: #fff;
            border-color: #41a8f1;
        }

    .input-group-btn .multiselect-clear-filter {
        background: #f98181;
        color: #fffefe;
        /* box-shadow: none; */
        text-shadow: none;
        border-color: #f96a6a;
        padding: 5px 10px 4px 10px;
    }

    .multiselect.dropdown-toggle {
        background: #fff;
        border-radius: 5px;
        border: 1px solid #b7b7b7;
        /*margin-bottom: 12px;*/
    }

    #ReportToModel label {
        font-weight: 500;
        margin-top: 5px;
    }

    #ReportToModel label {
        margin-top: 8px;
        font-size: 13px;
        margin-bottom: 2px;
    }

    #ddlBranch button, .multiselect.dropdown-toggle {
        color: #111 !important;
    }

        .multiselect.dropdown-toggle, .multiselect.dropdown-toggle:hover {
            z-index: 1;
            background: transparent;
        }

    .dataTables_length label {
        display: flex;
        align-items: center;
    }

    .dataTables_filter input {
        /*display: block;*/
        width: 60%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.428571429;
        color: #555;
        vertical-align: middle;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .dataTables_length select {
        margin-left: 5px;
        margin-right: 5px;
    }


    .dataTables_wrapper .dataTables_paginate .paginate_button {
        padding: 0;
    }

    .pagination > li > a, .pagination > li > span {
        padding: 4px 8px;
    }

    div.dataTables_wrapper div.dataTables_info {
        padding-top: 10px;
    }

   

    div.dataTables_wrapper div.dataTables_info {
        font-size: 12px;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        outline: none;
        border: none;
    }

    .dataTables_length {
        padding-top: 0;
    }

    table.dataTable thead th, table.dataTable thead td {
        padding-left: 10px !important;
    }

    .dynamicPopupTbl > tbody > tr > td, .dynamicPopupTbl > tbody > tr > td input {
        font-family: 'Poppins', sans-serif !important;
    }

    .dynamicPopupTbl {
        background: #fff;
    }

        .dynamicPopupTbl > tbody > tr > td:hover {
            background: #f6f6f6;
        }


    input:focus, textarea:focus, select:focus {
        outline: none;
    }

    .select2-container {
        width: 100% !important;
        z-index: 99999;
    }

    .select2-container--default .select2-selection--single {
        height: 34px;
        /* padding: 6px 12px; */
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

    /*.select2-container {
        z-index: 1;
    }*/

    .select2-container--default .select2-selection--single {
        background-color: transparent;
    }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            display: none;
        }

    .select2-container--default .select2-search--dropdown .select2-search__field {
        border-radius: 4px;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 32px;
        padding-right: 22px;
    }

    div:where(.swal2-container).swal2-backdrop-show, div:where(.swal2-container).swal2-noanimation {
        z-index: 99999;
    }

    .dropdown-menu, .modal {
        z-index: 999999;
    }

    .multiselect.dropdown-toggle {
        width: 100% !important;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .btn-group {
        width: 100%;
    }

    #dtCurrentStockDateOutOfRWarn {
        left: 278px !important;
        top: 20px;
        width: 200px;
    }

    .focusrow td {
        background-color: #3CA5DF !important;
        color: #ffffff !important;
    }

        .focusrow td input {
            color: #ffffff !important;
            background-color: #3CA5DF !important;
        }

    .dxgv.dx-ac img {
        width: 24px;
    }

    .disablefield {
        background: #c9c9c96b !important;
        cursor:not-allowed;
        
    }

        .disablefield #dtCurrentStockDate_I {
            color: #9d9d9d !important;
            cursor: not-allowed;
        }

        .disablefield #dtCurrentStockDate_B-1, #StoreNameTxt_I {
            cursor: not-allowed;
        }



    @@media only screen and (max-width: 768px) {
        #ddlAppIds .tooltip {
            display: none;
        }

        #ReportToTxt {
            width: 100% !important;
        }

        #btnReportToSearch {
            display: inline-block;
            position: absolute;
            right: 0;
            border-radius: 0 7px 7px 0;
        }
    }
</style>

<script>
    var ID = 0;
    var urlKeys = getUrlVars();

    function CloseAdd() {
        window.location.href = '/CurrentStock/Index';
    }
    function CancelAdd() {

        if (urlKeys.key == 'Add') {
            Swal.fire({
                title: 'Are you sure you want to Close with out save data ?',
                text: "This action cannot be undone!",
                imageUrl: '/assests/images/delete-big.png', // Custom icon for confirmation
                imageWidth: 40, // Adjust the width as needed
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/CurrentStock/Index';

                }
            });
        }
        else {
            window.location.href = '/CurrentStock/Index';
        }



    }

    function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    }

    function disableHeaderControls() {
        // Disable the DateEdit control
        const dateEditControl = ASPxClientControl.GetControlCollection().GetByName("dtCurrentStockDate");
        $("#dtCurrentStockDate").addClass("disablefield");
        if (dateEditControl) {
            dateEditControl.SetEnabled(false); // Disable the DateEdit control
        }

        // Disable the ButtonEdit control
        const buttonEditControl = ASPxClientControl.GetControlCollection().GetByName("StoreNameTxt");
        if (buttonEditControl) {
            buttonEditControl.SetEnabled(false); // Disable the ButtonEdit control
        }


    }

    if (urlKeys.key != 'Add') {
        ID = urlKeys.key;

        if (ID != 0) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("EditCurrentStock", "CurrentStock")",
                data: { stock_id: ID },
                success: function (response) {
                    if (response.stock_id == "") {
                        jAlert('No data found');
                    }
                    else {
                        var d = new Date(response.CurrentStockDate);
                        dtCurrentStockDate.SetDate(d);

                       // $("#hdnAddEditMode").val('MODIFYCURRENTSTOCK');

                        $('#hdnStoreCode').val(response.StoreId);
                        StoreNameTxt.SetText(response.StoreName);

                        $('#hdnStockId').val(ID);
                        document.getElementById("divDocNo").style.display = "block";
                        document.getElementById("txtDocumentNo").value = ID;

                        disableHeaderControls();

                        //gridStockProductEntryList.Refresh();
                        // gridStockProductEntryList.Refresh();


                    }
                }
            });
        }
    }


    $(document).ready(function () {
        $('#txtQuantity').on('input', function () {
            var inputValue = $(this).val().replace(/[^0-9.]/g, ''); // Remove non-numeric characters except for the dot
            var parts = inputValue.split('.');

            // Allow up to 15 digits before the decimal
            if (parts[0].length > 11) {
                parts[0] = parts[0].substring(0, 11);
            }

            // Limit decimals to 2
            if (parts[1] && parts[1].length > 4) {
                parts[1] = parts[1].substring(0, 4);
            }

            // Combine the integer and decimal parts with only one decimal point
            var sanitizedValue = parts.length > 1 ? parts[0] + '.' + parts.slice(1).join('') : parts[0];
            $(this).val(sanitizedValue);
        });
    });

    $(document).ready(function () {
        $('#StoreSearchModel').on('shown.bs.modal', function () {
            $('#txtStoreSearch').focus();
        });

        $('#ProductSearchModel').on('shown.bs.modal', function () {
            $('#txtProductSearch').focus();
        });
    });

    // Store Name
    function StoreButnClick(s, e) {
        $('#StoreSearchModel').modal('show');
        $("#txtStoreSearch").focus();
    }

    function Store_KeyDown(s, e) {
        if (e.htmlEvent.key == "Enter" || e.code == "NumpadEnter") {
            $('#StoreSearchModel').modal('show');
            $("#txtStoreSearch").focus();
        }
    }

    function Storekeydown(e) {
        var OtherDetails = {}
        if ($.trim($("#txtStoreSearch").val()) == "" || $.trim($("#txtStoreSearch").val()) == null) {
            return false;
        }
        OtherDetails.SearchKey = $("#txtStoreSearch").val();

        if (e.code == "Enter" || e.code == "NumpadEnter") {
            var HeaderCaption = [];
            HeaderCaption.push("Store Name");
            HeaderCaption.push("Store Type");

            if ($("#txtStoreSearch").val() != "") {
                callonServer("../../../Models/MRService.asmx/GetStoreList", OtherDetails, "StoreTable", HeaderCaption, "StoreIndex", "SetStore");
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[ShopIndex=0]"))
                $("input[ShopIndex=0]").focus();
        }
    }

    function SetStore(id, Name) {
        var key = id;
        $('#hdnStoreCode').val(id)
        if (key != null && key != '') {
            $('#StoreSearchModel').modal('hide');
            StoreNameTxt.SetText(Name);
            StoreNameTxt.SetFocus();
        }
    }

    // End Stoe Name

    // Product Name
    function ProductButnClick(s, e) {
        $('#ProductSearchModel').modal('show');
        $("#txtProductSearch").focus();
    }

    function Product_KeyDown(s, e) {
        if (e.htmlEvent.key == "Enter" || e.code == "NumpadEnter") {
            $('#ProductSearchModel').modal('show');
            $("#txtProductSearch").focus();
        }
    }

    function Productkeydown(e) {
        var OtherDetails = {}
        if ($.trim($("#txtProductSearch").val()) == "" || $.trim($("#txtProductSearch").val()) == null) {
            return false;
        }
        OtherDetails.SearchKey = $("#txtProductSearch").val();

        if (e.code == "Enter" || e.code == "NumpadEnter") {
            var HeaderCaption = [];
            HeaderCaption.push("Product Code");
            HeaderCaption.push("Product Name");

            if ($("#txtProductSearch").val() != "") {
                callonServer("../../../Models/MRService.asmx/GetProductList", OtherDetails, "ProductTable", HeaderCaption, "ProductIndex", "SetProduct");
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[ProductIndex=0]"))
                $("input[ProductIndex=0]").focus();
        }
    }

    function SetProduct(id, Name) {
        var key = id;
        $('#hdnProductID').val(id)
        if (key != null && key != '') {
            $.ajax({
                type: "post",
                url: "@Url.Action("GetProductUOM", "CurrentStock")",
                data: { productid: $('#hdnProductID').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    if (data.length > 0) {
                        $("#txtUOM").val(data[0].UOM_NAME);
                        $('#hdnUOMID').val(data[0].UOM_ID);

                        $('#ProductSearchModel').modal('hide');
                        ProductNameTxt.SetText(Name);
                        ProductNameTxt.SetFocus();
                    }

                }
            });

        }
    }

    // End Product Name

    function ClearData() {
        $("#hdnLevelGuiIDS").val('');
        //dtCurrentStockDate.Clear();
        //$('#hdnStoreCode').val('0');
        //StoreNameTxt.SetText('');

        $('#hdnProductID').val('0');
        $('#txtQuantity').val('');

        dtMfgDate.Clear();
        dtExpDate.Clear();
        $('#txtUOM').val('');
        $('#hdnUOMID').val('0');
        $("#txtExpSalesValue").val('');
        ProductNameTxt.SetText('');


        $("#txtProductSearch").val('');
        $("#txtStoreSearch").val('');


        var txt = "<table border = '1' width = '100%' class='dynamicPopupTbl' > <tr class='HeaderStyle'> <th class='hide'>id</th><th class='StoreIndex_0'>Store Name</th><th class='ShopIndex_3'>Store Type</th></table>"
        document.getElementById("StoreTable").innerHTML = txt;

        txt = "<table border = '1' width = '100%' class='dynamicPopupTbl' > <tr class='HeaderStyle'> <th class='hide'>id</th><th class='ProductIndex_0'>Product Code</th><th class='ProductIndex_1'>Product Name</th></table>"
        document.getElementById("ProductTable").innerHTML = txt;


        //var buttonEdit = ASPxClientControl.GetControlCollection().GetByName("StoreNameTxt");
        //if (buttonEdit) {
        //    buttonEdit.SetEnabled(false); // Use the DevExpress API to enable/disable
        //}
        StoreNameTxt.SetEnabled = false;
        dtCurrentStockDate.SetEnabled(false);
    }

    function SaveCurrentStock(mode)
    {
        if (dtCurrentStockDate.GetText() == "" || dtCurrentStockDate.GetText() == "01-01-0100" || dtCurrentStockDate.GetText() == null
            || dtCurrentStockDate.GetText() == undefined) {


            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Please enter valid Current Stock Date. Current Stock Date should be greater than or equal to current system date.'
            });

            $("#dtCurrentStockDate").focus();
            return;
        }


        if ($("#hdnStoreCode").val() == "" || $("#hdnStoreCode").val() == "0" || $("#hdnStoreCode").val() == null || $("#hdnStoreCode").val() == undefined) {

            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Please select Store.'
            });

            $("#StoreNameText").focus();
            return;
        }


        var noofvisiblerows = gridStockProductEntryList.GetVisibleRowsOnPage();
        if (noofvisiblerows == 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Please Add Product Details For to proceed.'
            });
            return false;
        }

        if (urlKeys.key == "Add") {
            $("#hdnAddEditMode").val("ADDCURRENTSTOCK");
        }
        else {
            $("#hdnAddEditMode").val("MODIFYCURRENTSTOCK");
        }



        var action = $("#hdnAddEditMode").val();

        var data = {
            Action: action,
            StockId: $('#hdnStockId').val(),
            StoreCode: $("#hdnStoreCode").val(),
            CurrentStockDate: dtCurrentStockDate.GetText()
        }

        $.ajax({
            url: "@Url.Action("SaveCurrentStock", "CurrentStock")",
            async: false,
            data: { data: data },
            type: 'POST',
            success: function (returnValue
                ) {
                if (returnValue == "Duplicate") {
                    //jAlert("Data exists with this Shop and Product.");
                    Swal.fire({
                        icon: 'error',
                        title: 'Sorry!',
                        text: 'Data exists with this Shop and Product.'
                    });
                }
                else if (returnValue == "Success") {
                    //jAlert("Current Stock submitted successfully.");
                    Swal.fire({
                        title: 'Success!',
                        html: 'Stock saved successfully.',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            setTimeout(function () {
                                var url = '/CurrentStock/Index';
                                window.location.href = url;
                            }, 500);
                        }
                    });
                }
                else {
                    //jAlert(returnValue);
                    Swal.fire({
                        icon: 'error',
                        title: 'Sorry!',
                        text: returnValue
                    });
                }
            },
            error: function () {
            },
        });

    }

    function EditLevelData(values) {
        $.ajax({
            type: "POST",
            url: "../CurrentStock/EditLevelData",
            data: { HiddenID: values },
            success: function (response) {
                if (response != null) {

                    $("#hdnLevelGuiIDS").val(response.Guids);
                    //$("#hdnAddEditMode").val('MODIFYCURRENTSTOCK');
                    //$("#myModalLabel").text("Edit Current Stock");
                    //$('#hdnStockId').val(stockid);

                    //$('#hdnStoreCode').val(data.ShopCode);
                    //StoreNameTxt.SetText(data.StoreName);

                    $('#hdnProductID').val(response.ProductID);
                    ProductNameTxt.SetText(response.ProductName);

                    $("#txtQuantity").val(response.Quantity);
                    $("#txtUOM").val(response.UOMName);
                    $('#hdnUOMID').val(response.UOMid);


                    // MfgDate
                    if (response.MfgDate != "" && response.MfgDate !="01-01-1900") {
                        var d = new Date(response.MfgDate);
                        dtMfgDate.SetDate(d);

                        //var partsMFG = response.MfgDate.split("-");
                        //var dayMFG = parseInt(partsMFG[0], 10);
                        //var monthMFG = parseInt(partsMFG[1], 10) - 1; // Month is 0-based
                        //var yearMFG = parseInt(partsMFG[2], 10);

                        //var dateM = new Date(yearMFG, monthMFG, dayMFG); // Month is 0-based, so 10 represents November
                        //dtMfgDate.SetDate(dateM);

                    }
                    else {
                        dtMfgDate.Clear();
                    }
                    // End MfgDate


                    // ExpDate
                    if (response.ExpDate != "" && response.ExpDate != "01-01-1900") {
                        var d = new Date(response.ExpDate);
                        dtExpDate.SetDate(d);

                        //var partsEXP = response.ExpDate.split("-");
                        //var dayEXP = parseInt(partsEXP[0], 10);
                        //var monthEXP = parseInt(partsEXP[1], 10) - 1; // Month is 0-based
                        //var yearEXP = parseInt(partsEXP[2], 10);

                        //var dateE = new Date(yearEXP, monthEXP, dayEXP); // Month is 0-based, so 10 represents November
                        //dtExpDate.SetDate(dateE);

                    }
                    else {
                        dtExpDate.Clear();
                    }
                    // End ExpDate

                    MfgDateValidate();

                    /* $("#btnAdd").text("Save");*/
                    $("#btnAdd").html('<span class="btn-icon saveicon"><img src="../../../assests/images/save-instagram.svg"></span> Save');


                }
            }
        });
    }

    function DeleteLevelData(values) {
        var noofvisiblerows = gridStockProductEntryList.GetVisibleRowsOnPage();
        if (noofvisiblerows != 1) {
            $.ajax({
                type: "POST",
                url: "../CurrentStock/DeleteLevelData",
                data: { HiddenID: values },
                success: function (response) {
                    if (response != null) {
                        gridStockProductEntryList.Refresh();
                        gridStockProductEntryList.Refresh();
                    }
                }
            });
        }
    }


    function btnAdd_Click()
    {
        //$("#hdnAddEditMode").val("ADDCURRENTSTOCK");

        if (dtCurrentStockDate.GetText() == "" || dtCurrentStockDate.GetText() == "01-01-0100" || dtCurrentStockDate.GetText() == null
            || dtCurrentStockDate.GetText() == undefined) {

            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Please enter valid Current Stock Date. Current Stock Date should be greater than or equal to current system date.'
            });

            return false;
        }


        if ($("#hdnStoreCode").val() == "" || $("#hdnStoreCode").val() == "0" || $("#hdnStoreCode").val() == null || $("#hdnStoreCode").val() == undefined) {

            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Please select Store.'
            });

            return false;
        }


        if ($("#hdnProductID").val() == "" || $("#hdnProductID").val() == "0" || $("#hdnProductID").val() == null || $("#hdnProductID").val() == undefined) {

            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Please select Product.'
            });

            return false;
        }


        if ($("#txtQuantity").val() == "" || $("#txtQuantity").val() == "0" || $("#txtQuantity").val() == null || $("#txtQuantity").val() == undefined) {

            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Please enter Quantity.'
            });

            return false;
        }

        const mfgDate = new Date(dtMfgDate.GetDate());
        const expDate = new Date(dtExpDate.GetDate());

        if (mfgDate > expDate) {
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Mfg. Date cannot be greater than Exp. Date.'
            });

            return false;
        }

        //if (dtMfgDate.GetDate() > dtExpDate.GetDate()) {
        //    Swal.fire({
        //        icon: 'warning',
        //        title: 'Warning',
        //        text: 'Mfg. Date cannot be greater than Exp. Date.'
        //    });

        //    return false;
        //}

        //if (dtMfgDate.GetText() != "" && dtExpDate.GetText() != "" && dtMfgDate.GetText() != "01-01-0100" && dtExpDate.GetText() != "01-01-0100") {

        //    if (dtMfgDate.GetText() > dtExpDate.GetText()) {
        //        Swal.fire({
        //            icon: 'warning',
        //            title: 'Warning',
        //            text: 'Mfg. Date cannot be lessthan Exp. Date.'
        //        });

        //        return false;
        //    }
        //}
        //else if (dtExpDate.GetText() != "" && dtExpDate.GetText() != "01-01-0100" && (dtMfgDate.GetText() == "" || dtMfgDate.GetText() == "01-01-0100" ) ) {

        //    Swal.fire({
        //        icon: 'warning',
        //        title: 'Warning',
        //        text: 'Mfg. Date cannot be lessthan Exp. Date.'
        //    });

        //    return false;
        //}

        $.ajax({
           type: "POST",
           url: "@Url.Action("CHECKUNIQUESTOCKDETAILS", "CurrentStock")",
            data: JSON.stringify({ StoreCode: $("#hdnStoreCode").val(), ProductID: $("#hdnProductID").val() }),
           async: true,
           contentType: "application/json; charset=utf-8",
           dataType: "json",
           success: function (msg) {
               CheckUniqueCode = msg;
               if (CheckUniqueCode != 0) {
                   Swal.fire({
                       icon: 'warning',
                       title: 'Warning',
                       text: 'Record for this Store and Product already exists.'
                   });
               }
               else
               {
                   disableHeaderControls();

                   var data = {
                        StockId: $('#hdnStockId').val(),
                        StoreCode: $("#hdnStoreCode").val(),
                        ProductID: $("#hdnProductID").val(),
                        ProductName: ProductNameTxt.GetText(),
                        CurrentStockDate: dtCurrentStockDate.GetText(),
                        UOMid: $("#hdnUOMID").val(),
                        UOMName: $("#txtUOM").val(),
                        MfgDate: dtMfgDate.GetText(),
                        ExpDate: dtExpDate.GetText(),
                        Quantity: $("#txtQuantity").val(),
                        Guids: $("#hdnLevelGuiIDS").val(),

                   }

                   $.ajax({
                        type: "POST",
                        url: "@Url.Action("AddLevelDetails", "CurrentStock")",

                        data: "{prod:" + JSON.stringify(data) + "}",
                        async: true,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response)
                        {
                            if (response != null) {
                                gridStockProductEntryList.Refresh();
                                gridStockProductEntryList.Refresh();

                                ClearData();

                                /*$("#btnAdd").text("Add");*/
                                $("#btnAdd").html('<span class="btn-icon"><i class="fa fa-plus"></i></span> Add');
                            }
                        }
                   });

                    }

               }

        });

    }

    function MfgDateValidate() {
        //dtExpDate.SetMinDate(dtMfgDate.GetDate() + 1);

        var newdate = new Date(dtMfgDate.GetDate());
        newdate.setDate(newdate.getDate() + 1);
        dtExpDate.SetMinDate(newdate);


        if (dtMfgDate.GetDate() >= dtExpDate.GetDate()) {
            dtExpDate.SetDate(newdate);
        }
       
    }

    function ExpDateValidate() {
        if (dtMfgDate.GetDate() == null) {
            Swal.fire({
                icon: 'warning',
                title: 'Warning',
                text: 'Select Mfg. Date.'
            });

            dtExpDate.Clear();
        }
    }

</script>


<div class="breadCumb">
    <span id="HeaderLableID">Current Stock</span>
    @*<div id="ApprovalCross" onclick="CancelAdd()" class="crossBtnN"><i class="fa fa-times"></i></div>*@
</div>

<div class="container">
    <div class="form_main backBox p-3 pt-4 mb-3">
        <div id="ApprovalCross" onclick="CancelAdd()" class="crossBtnN">×</div>
        <div class="row mb-3">

            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-3 mb-10" id="divDocNo" style="display:none;" >
                        <label>Document No.<em style="color: red">*</em></label>
                        <div>
                            @Html.TextBoxFor(m => m.stock_id, new { @class = "form-control", @id = "txtDocumentNo",  @disabled = "disabled" })
                        </div>
                    </div>
                    
                    <div class="col-md-3  for-cust-icon">
                        <label>Current Stock Date<em style="color: red">*</em></label>
                        <div class="date-select">
                            @Html.DevExpress().DateEditFor(x => x.CurrentStockDate,
                           deSettings =>
                           {
                               deSettings.Name = "dtCurrentStockDate";
                               deSettings.Date = DateTime.Now;
                               deSettings.Properties.UseMaskBehavior = true;
                               deSettings.Properties.EditFormat = EditFormat.Custom;
                               deSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                               deSettings.Properties.DisplayFormatString = "dd-MM-yyyy";
                               deSettings.Properties.EditFormatString = "dd-MM-yyyy";
                               deSettings.Properties.MinDate = DateTime.Now.AddDays(-1);
                           }).GetHtml()
                            <img src="/assests/images/calendar-icon.png" class="calendar-icon" />
                        </div>
                    </div>



                    <div class="col-md-3 ">
                        <label>Store<em style="color: red">*</em></label>
                        <div>
                            @Html.DevExpress().ButtonEdit(
                            settings =>
                            {
                                settings.Name = "StoreNameTxt";
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.Text = Model.StoreName;
                                settings.ReadOnly = true;
                                settings.Properties.Buttons.Add("...");
                                settings.Properties.ClientSideEvents.ButtonClick = "function(s,e){StoreButnClick(s,e);}";
                                settings.Properties.ClientSideEvents.KeyDown = "function(s,e){Store_KeyDown(s,e);}";

                            }).GetHtml()

                            @*<input type="hidden" id="hdnStockId" value="@Model.NewUserid">*@
                            <input type="hidden" id="hdnStoreCode" value="@Model.StoreId">
                        </div>

                    </div>

                </div>

                <div class="clearfix"></div>

                <hr class="header-part-separator" />

                <div class="row">
                    <div class="col-md-2 mb-4">
                        <label>Product<em style="color: red">*</em></label>
                        <div>
                            @Html.DevExpress().ButtonEdit(
                            settings =>
                            {
                                settings.Name = "ProductNameTxt";
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.Text = Model.ProductName;
                                settings.ReadOnly = true;
                                settings.Properties.Buttons.Add("...");
                                settings.Properties.ClientSideEvents.ButtonClick = "function(s,e){ProductButnClick(s,e);}";
                                settings.Properties.ClientSideEvents.KeyDown = "function(s,e){Product_KeyDown(s,e);}";

                            }).GetHtml()

                            <input type="hidden" id="hdnProductID" value="@Model.ProductId">
                        </div>

                    </div>

                    <div class="col-md-2 mb-4">
                        <label>Quantity<em style="color: red">*</em></label>
                        <div>
                            @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control ", @id = "txtQuantity", type = "text", placeholder = "0.0000" })
                            @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class=" col-sm-2 mb-3">
                        <label>UOM</label>
                        <div class="relative">
                            @Html.TextBoxFor(m => m.UOM, new { @class = "form-control", @id = "txtUOM", @readonly = "readonly" })

                            <input type="hidden" id="hdnUOMID">
                        </div>
                    </div>
                    @*</div>

        <div class="clearfix"></div>

        <div class="row">*@
                    <div class="col-md-2 mb-4  for-cust-icon">
                        <label>Mfg. Date</label>
                        <div class="date-select">
                            @Html.DevExpress().DateEditFor(x => x.MfgDate,
                           deSettings =>
                           {
                               deSettings.Name = "dtMfgDate";
                               deSettings.Date = DateTime.Now;
                               deSettings.Properties.UseMaskBehavior = true;
                               deSettings.Properties.EditFormat = EditFormat.Custom;
                               deSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                               deSettings.Properties.DisplayFormatString = "dd-MM-yyyy";
                               deSettings.Properties.EditFormatString = "dd-MM-yyyy";
                               deSettings.Properties.ClientSideEvents.DateChanged = "MfgDateValidate";
                               //deSettings.Properties.MinDate = DateTime.Now.AddDays(-1);
                           }).GetHtml()
                            <img src="/assests/images/calendar-icon.png" class="calendar-icon" />
                        </div>
                    </div>

                    <div class="col-md-2 mb-4  for-cust-icon">
                        <label>Exp. Date</label>
                        <div class="date-select">
                            @Html.DevExpress().DateEditFor(x => x.ExpDate,
                           deSettings =>
                           {
                               deSettings.Name = "dtExpDate";
                               deSettings.Date = DateTime.Now;
                               deSettings.Properties.UseMaskBehavior = true;
                               deSettings.Properties.EditFormat = EditFormat.Custom;
                               deSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                               deSettings.Properties.DisplayFormatString = "dd-MM-yyyy";
                               deSettings.Properties.EditFormatString = "dd-MM-yyyy";
                               deSettings.Properties.ClientSideEvents.DateChanged = "ExpDateValidate";
                               //deSettings.Properties.MinDate = DateTime.Now.AddDays(-1);

                           }).GetHtml()
                            <img src="/assests/images/calendar-icon.png" class="calendar-icon" />
                        </div>
                    </div>

                    <div class=" col-sm-2 mb-4">
                        <label class="">&nbsp; </label>
                        <div class="relative" style="">
                            <button type="button" id="btnAdd" onclick="btnAdd_Click()" class="btn btn-success add-btn"><span class="btn-icon"><i class="fa fa-plus"></i></span> Add</button>
                        </div>
                    </div>
                </div>

                <div class="clearfix"></div>
                <div class="clear"></div>
                <div class="clear"></div>


                <div class="scrooler">
                    <div id="refreshgrid">
                        @{
                            Html.RenderAction("GetProductEntryList", "CurrentStock");
                        }
                    </div>
                </div>

                <div class="clear"></div>
            </div>




            <div class="clear"></div>
            <div class=" px-4 mt-4">
                @if (Convert.ToInt16(ViewBag.IsView) == 0 || Convert.ToInt16(ViewBag.IsView) == 4)
                {
                    <button type="button" class="btn btn-success save-btn mr-4" onclick="SaveCurrentStock('Exit');"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save and Exit</button>
                }
                <button type="button" class="btn btn-cancel cancel-catg" onclick="CancelAdd()"><span class="btn-icon"><img src="../../../assests/images/cancel.svg"></span> Cancel & Exit</button>

            </div>
        </div>
    </div>

</div>

<input type="hidden" value="@Model.stock_id" id="hdnStockId" />
<input type="hidden" id="hdnAddEditMode" />
<input type="hidden" value="" id="hdnLevelGuiIDS" />

<div class="modal fade pmsModal w70" id="StoreSearchModel" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog w-50">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Store Search</h4>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control mb-3" onkeydown="Storekeydown(event)" id="txtStoreSearch" autofocus style="width:100%" placeholder="Search By Store Name" />
                <div id="StoreTable">
                    <table border='1' width="100%" class="dynamicPopupTbl">
                        <tr class="HeaderStyle">
                            <th class="hide">id</th>
                            <th>Store Name</th>
                            <th>Store Type</th>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade pmsModal" id="ProductSearchModel" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog w-50">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Product Search</h4>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control mb-3" onkeydown="Productkeydown(event)" id="txtProductSearch" autofocus style="width:100%" placeholder="Search By Product Code or Name" />
                <div id="ProductTable">
                    <table border='1' width="100%" class="dynamicPopupTbl">
                        <tr class="HeaderStyle">
                            <th class="hide">id</th>
                            <th>Product Code</th>
                            <th>Product Name</th>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>