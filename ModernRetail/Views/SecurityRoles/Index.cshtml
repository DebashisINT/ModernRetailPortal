@using System.Web.UI.WebControls
@using DevExpress.Web;
@using DevExpress.Web.Mvc;

@model ModernRetail.Models.SecurityRolesModel
@{
    ViewBag.Title = "Security Roles";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="/assests/pluggins/easyui/easyui.css" rel="stylesheet" />
<link href="/assests/pluggins/easyui/icon.css" rel="stylesheet" />
<link href="/assests/pluggins/jquery.alert/jquery.alerts.css" rel="stylesheet" />
<script src="/assests/pluggins/jquery.alert/jquery.ui.draggable.js"></script>
<script src="/assests/pluggins/jquery.alert/jquery.alerts.js"></script>
<script>
    var ID = 0;
    var urlKeys = getUrlVars();
    function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}
    if (urlKeys.key != 'Add') {
        ID = urlKeys.key;
        $("#hdnAdd").val(ID);
        if (ID != 0) {
            $("#headertitle").val("Edit Security Role");

            $.ajax({
                type: "POST",
                url: "@Url.Action("Edit", "SecurityRoles")",
                data: { id: ID },
                success: function (response) {
                    if (response.code == "") {
                        jAlert('No data found');
                    }
                    else {
                        $("#grp_name").val(response.grp_name);
                        $("#hdnAdd").val(response.grp_id);


                    }
                }
            });
        }
    }
    else {
        $("#hdnCloseAdd").val("1");
    }

</script>
<style>
    #grid .dxgvHSDC > div, #grid .dxgvCSD {
        width: 100% !important;
    }

    .hide {
        display: none;
    }

    .full-grid, #grid {
        width: 100% !important;
    }

    #gridLevelEntryList, #gridLevelEntryList > tbody > tr > td > div.dxgvHSDC > div {
        width: 100% !important;
    }

    .dxgvControl_PlasticBlue td.dxgvBatchEditModifiedCell_PlasticBlue {
        background: white !important;
    }
</style>
<style>
    .dxgvControl_PlasticBlue td.dxgvBatchEditModifiedCell_PlasticBlue {
        background: #fff;
    }

    .dxgvStatusBar_PlasticBlue {
        display: none;
    }

    .modal-header {
        padding: 8px;
        background: #094e8c;
        border-radius: 8px 8px 0 0;
    }

    button.close {
        color: #fff;
        font-weight: 300;
        opacity: .5;
    }

    .close:hover, .close:focus {
        color: #fff;
        opacity: 1;
    }

    .modal-content {
        border-radius: 10px;
    }

    .modal-footer {
        padding: 15px 10px 15px;
        border-top: 1px solid #c0c0c0;
    }


    .dxgvLoadingPanel_PlasticBlue {
        left: 42% !important;
    }
    /*Rev 2.0*/
    #gridUserList {
        width: 100% !important;
        max-width: 100% !important;
    }
    /*Rev end 2.0*/

    /*Rev 3.0*/

    #BranchGridLookup {
        min-height: 34px;
        border-radius: 5px;
    }

    .dxeButtonEditButton_PlasticBlue {
        background: #094e8c !important;
        border-radius: 4px !important;
        padding: 0 4px !important;
    }

    .chosen-container-single .chosen-single div {
        background: #094e8c;
        color: #fff;
        border-radius: 4px;
        height: 30px;
        top: 1px;
        right: 1px;
        /*position:relative;*/
    }

        .chosen-container-single .chosen-single div b {
            display: none;
        }

        .chosen-container-single .chosen-single div::after {
            content: '<';
            position: absolute;
            top: 2px;
            right: 3px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
        }

    .chosen-container-active.chosen-with-drop .chosen-single div {
        background: #094e8c;
        color: #fff;
    }

        .chosen-container-active.chosen-with-drop .chosen-single div::after {
            transform: rotate(90deg);
            right: 5px;
        }

    .calendar-icon {
        position: absolute;
        bottom: 8px;
        right: 14px;
        z-index: 0;
        cursor: pointer;
    }

    .date-select .form-control {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #ddlState, #ddlPartyType, #divoutletStatus, #slmonth, #slyear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .h-branch-select {
        position: relative;
    }

        .h-branch-select::after {
            content: '<';
            position: absolute;
            top: 33px;
            right: 13px;
            font-size: 18px;
            transform: rotate(269deg);
            font-weight: 500;
            background: #094e8c;
            color: #fff;
            height: 18px;
            display: block;
            width: 28px;
            /* padding: 10px 0; */
            border-radius: 4px;
            text-align: center;
            line-height: 19px;
            z-index: 0;
        }

    .multiselect.dropdown-toggle {
        text-align: left;
    }

    .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .whclass.selectH {
        padding-right: 30px;
    }

    #ddlShowReport:focus-visible {
        box-shadow: none;
        outline: none;
        border: 1px solid #164f93;
    }

    #ddlShowReport:focus {
        border: 1px solid #164f93;
    }

    .whclass.selectH:focus-visible {
        outline: none;
    }

    .whclass.selectH:focus {
        border: 1px solid #164f93;
    }

    .dxeButtonEdit_PlasticBlue {
        border: 1px Solid #ccc;
    }

    .chosen-container-single .chosen-single {
        border: 1px solid #ccc;
        background: #fff;
        box-shadow: none;
    }

    .daterangepicker td.active, .daterangepicker td.active:hover {
        background-color: #175396;
    }

    label {
        font-weight: 500;
    }

    .dxgvHeader_PlasticBlue {
        background: #164f94;
    }

    .dxgvSelectedRow_PlasticBlue td.dxgv {
        color: #fff;
    }

    .dxeCalendarHeader_PlasticBlue {
        background: #185598;
    }

    .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
    .dxbButton_PlasticBlue,
    .dxeCalendar_PlasticBlue,
    .dxeEditArea_PlasticBlue {
        font-family: 'Poppins', sans-serif !important;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        /*font-weight: 500;*/
    }

    .btnPadding .btn {
        padding: 7px 14px !important;
        border-radius: 4px;
    }

    .btnPadding {
        padding-top: 24px !important;
    }

    .dxeButtonEdit_PlasticBlue {
        border-radius: 5px;
        height: 34px;
    }

    #dtFrom, #dtTo {
        position: relative;
        z-index: 1;
        background: transparent;
    }

    #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
        background: #165092;
        vertical-align: middle;
        font-weight: 500;
    }

    /*#refreshgrid {
        background: #e5e5e5;
        padding: 0 10px;
        margin-top: 15px;
        border-radius: 8px;
    }*/

    .styled-checkbox {
        position: absolute;
        opacity: 0;
        z-index: 1;
    }

        .styled-checkbox + label {
            position: relative;
            /*cursor: pointer;*/
            padding: 0;
            margin-bottom: 0 !important;
        }

            .styled-checkbox + label:before {
                content: "";
                margin-right: 6px;
                display: inline-block;
                vertical-align: text-top;
                width: 16px;
                height: 16px;
                /*background: #d7d7d7;*/
                margin-top: 2px;
                border-radius: 2px;
                border: 1px solid #c5c5c5;
            }

        .styled-checkbox:hover + label:before {
            background: #094e8c;
        }


        .styled-checkbox:checked + label:before {
            background: #094e8c;
        }

        .styled-checkbox:disabled + label {
            color: #b8b8b8;
            cursor: auto;
        }

            .styled-checkbox:disabled + label:before {
                box-shadow: none;
                background: #ddd;
            }

        .styled-checkbox:checked + label:after {
            content: "";
            position: absolute;
            left: 3px;
            top: 9px;
            background: white;
            width: 2px;
            height: 2px;
            box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
            transform: rotate(45deg);
        }

    #dtstate {
        padding-right: 8px;
    }

    .pmsModal .modal-header {
        /*background: #094e8c !important;
    background-image: none !important;*/
        padding: 11px 20px;
        border: none;
        border-radius: 15px 15px 0 0 !important;
        /*color: #fff;*/
        /*background: linear-gradient(to right, #1f5fbf, #11998e) !important;*/
    }

    .pmsModal .modal-content {
        border: none;
        background: linear-gradient(1deg, #cff3ff, #ffffff);
    }

    /*.pmsModal .modal-header .modal-title {
        font-size: 14px;
    }*/

    .pmsModal .modal-header .modal-title {
        font-size: 16px !important;
        color: #111;
        font-size: 24px;
    }

    .pmsModal .modal-header {
        background: transparent !important;
        margin-bottom: 10px;
        border-bottom: 1px solid #d5d5d5;
    }

    .close {
        font-size: 34px;
        opacity: .8;
    }

    button.close {
        color: #111 !important;
        font-weight: 400 !important;
        opacity: .8 !important;
        font-size: 32px !important;
    }

    .pmsModal .close {
        font-weight: 400;
        font-size: 25px;
        color: #fff;
        text-shadow: none;
        opacity: .5;
    }

    #EmployeeTable {
        margin-top: 10px;
    }

        #EmployeeTable table tr th {
            padding: 5px 10px;
        }

    .dynamicPopupTbl {
        font-family: 'Poppins', sans-serif !important;
    }

        .dynamicPopupTbl > tbody > tr > td,
        #EmployeeTable table tr th {
            font-family: 'Poppins', sans-serif !important;
            font-size: 12px;
        }

    .w150 {
        width: 160px;
    }

    .eqpadtbl > tbody > tr > td:not(:last-child) {
        padding-right: 20px;
    }

    #dtFrom_B-1, #dtTo_B-1 {
        background: transparent !important;
        border: none;
        width: 30px;
        padding: 10px !important;
    }

        #dtFrom_B-1 #dtFrom_B-1Img,
        #dtTo_B-1 #dtTo_B-1Img {
            display: none;
        }

    #dtFrom_I, #dtTo_I {
        background: transparent;
    }

    .for-cust-icon {
        position: relative;
        z-index: 1;
    }

    .pad-md-18 {
        padding-top: 24px;
    }

    .open .dropdown-toggle.btn-default {
        background: transparent !important;
    }

    .input-group-btn .multiselect-clear-filter {
        height: 32px;
        border-radius: 0 4px 4px 0;
    }

    .btn .caret {
        display: none;
    }

    .iminentSpan button.multiselect.dropdown-toggle {
        height: 34px;
    }

    .col-lg-2 {
        padding-left: 8px;
        padding-right: 8px;
    }

    select:not(.btn) {
        -webkit-appearance: none;
        position: relative;
        z-index: 1;
        background-color: transparent;
    }

    .dxgvControl_PlasticBlue a {
        margin: 0 3px;
    }

    .dxeButtonDisabled_PlasticBlue {
        background: #ababab !important;
    }

    .red {
        color: red;
    }

    .linerHd {
        background: #4e8fcf !important;
    }

    /*Rev end 3.0*/
    /*Rev 4.0*/
    #popup_message {
        padding-left: 0 !important;
        text-align: center !important;
    }

    #popup_panel {
        margin: 14px 0 5px;
    }

    #popup_ok, #popup_cancel {
        border-radius: 4px !important;
    }
    /*Rev end 4.0*/
    /*Rev 5.0*/
    #gridUserList_DXPagerTop_PSP, #gridUserList_DXPagerBottom_PSP {
        right: 36px !important;
        left: auto !important;
    }
    /*Rev end 5.0*/


    .add-btn .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 21px;
        margin-right: 5px;
    }

    .add-btn {
        transition: all .4s;
    }

        .add-btn:hover {
            color: #fff;
            background-color: #0e4f23;
            border-color: #0e4f23;
        }

        .add-btn .btn-icon i {
            color: #238945;
        }

    .add-btn {
        background-color: #238945;
        margin-right: 5px;
    }

    .btn {
        border-radius: 8px;
        height: 34px;
        padding-left: 12px;
        padding-right: 12px;
        color: #fff;
    }

        .btn:active, .btn:hover, .btn:focus {
            color: #fff !important;
        }

    .buttons-alignment {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .show-btn .btn-icon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 21px;
        margin-right: 5px;
        color: #054682;
    }

    .show-btn {
        background: #054682;
        transition: all .4s;
        margin-right: 5px;
    }

        .show-btn:hover {
            background: #072743;
        }

    .btn-cancel {
        background-color: #DC0505;
        color: #fff;
    }

    .btn-export {
        background: #e17134;
        color: #fff;
    }

        .btn-export:hover {
            background: #a24716 !important;
            color: #fff;
        }

    .swal2-confirm.swal2-styled {
        border-radius: 8px !important;
    }

    .swal2-styled {
        border-radius: 12px !important;
        padding: 8px 20px !important;
        color: #fff !important;
        font-size: 14px !important;
    }

    .swal2-html-container {
        margin-top: 5px !important;
    }

    div:where(.swal2-container) button:where(.swal2-styled):not([disabled]) {
        width: 90px !important;
        border-radius: 8px !important;
    }

    div:where(.swal2-container).swal2-backdrop-show, div:where(.swal2-container).swal2-noanimation {
        background: rgb(0 0 0 / 50%) !important;
    }

    div:where(.swal2-container).swal2-center > .swal2-popup {
        background: linear-gradient(1deg, #cff3ff, #ffffff);
    }


    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip {
        visibility: hidden;
        /*width: 140px;*/
        background-color: #0d8f24;
        color: #fff;
        text-align: center;
        border-radius: 10px;
        padding: 8px 10px;
        position: absolute;
        z-index: 99;
        bottom: 130%;
        left: 42%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

        .tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -10px;
            border-width: 10px;
            border-style: solid;
            border-color: #0d8f24 transparent transparent transparent;
        }

    .tooltip-container:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }

    .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
        /*overflow: visible;*/
    }

    .save-btn .btn-icon, .cancel-catg .btn-icon, .saveicon {
        border-radius: 50px;
        width: 21px;
        height: 21px;
        display: inline-block;
        background: #fff;
        line-height: 20px;
        margin-right: 5px;
    }

        .save-btn .btn-icon img, .saveicon img {
            color: #238945;
            width: 14px;
        }



    .cancel-catg, .save-btn {
        transition: all .3s ease-in-out;
        margin-right: 10px;
    }

        .cancel-catg .btn-icon img {
            color: #DC0505;
            width: 16px;
        }

        .cancel-catg:hover {
            transform: scale(1.1);
        }

        .save-btn:hover {
            transform: scale(1.1);
        }

    .modal-footer .btn + .btn {
        margin-bottom: 0;
        margin-left: 5px;
    }

    .cancel-catg {
        margin-right: 5px;
    }

    .close:hover, .close:focus {
        color: #111 !important;
    }

    #NEWVISIT, #REVISIT, #ORDERAMOUNT, #COLLECTION, #ORDERQTY {
        padding: 0;
    }

        #NEWVISIT input, #REVISIT input, #ORDERAMOUNT input, #COLLECTION input, #ORDERQTY input {
            height: 100%;
            padding: 0 5px;
        }

    table.dataTable thead th {
        padding: 6px 9px;
    }

    .dxgvControl_PlasticBlue a {
        margin: 5px 3px;
        display: inline-block;
    }

    .pmsModal .modal-body {
        padding: 10px 20px;
    }

    .pmsModal .modal-footer {
        padding: 10px 20px;
    }

    .dataTables_length label {
        display: flex;
        align-items: center;
    }

    .dataTables_filter input {
        /*display: block;*/
        width: 60%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.428571429;
        color: #555;
        vertical-align: middle;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .dataTables_length select {
        margin-left: 5px;
        margin-right: 5px;
    }


    .dataTables_wrapper .dataTables_paginate .paginate_button {
        padding: 0;
    }

    .pagination > li > a, .pagination > li > span {
        padding: 4px 8px;
    }

    div.dataTables_wrapper div.dataTables_info {
        padding-top: 10px;
    }

    .crossBtnN {
        color: #fff;
        cursor: pointer;
    }

    div.dataTables_wrapper div.dataTables_info {
        font-size: 12px;
    }

    #GridLevellistModel .modal-dialog {
        width: 45%;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        outline: none;
        border: none;
    }

    .dynamicPopupTbl > tbody > tr > td input {
        width: 100%;
        white-space: break-spaces;
    }
</style>
<style type="text/css">
    .tree-title {
        width: 200%;
    }

        .tree-title > div {
            width: 7%;
        }

        .tree-title span {
            float: left;
            width: 93%;
        }

            .tree-title span input {
                margin-left: 13px;
            }

    .tree-folder {
        display: none !important;
    }

    .tree-folder-open {
        display: none !important;
    }

    .tree-icon {
        display: none !important;
    }

    .tree-file {
        display: none !important;
    }

    .chckRights {
        /* left: 3px;*/
        position: relative;
    }

    .form-horizontal .form-group {
        margin-right: 0;
        margin-left: 0;
    }

    .mt-25
    {
        margin-top: 25px;
    }
</style>
<script type="text/javascript" src="/assests/pluggins/easyui/jquery.easyui.min.js"></script>
<script lang="javascript" type="text/javascript">
    var CheckFire = false;
    $(function () {
        GenerateMenus();
        $('#ulMenuTree').tree({
            checkbox: true,
            cascadeCheck: true,
            animate: true,
            icon: false,
            onLoadSuccess: function (node, data) {
                // alert('2');
                CheckListgenerator();
                CheckSelectedValues();
                CheckFire = true;
            },
            onCheck: function (node, checked) {
                //alert('3');
                if (CheckFire) {
                    var nodes = $('#ulMenuTree').tree('getChecked', 'unchecked');

                    var CheckedUncheckedNodeId = node.id;
                    var IsUnchekced = false;

                    //Uncheck all the nodes which is not checked
                    var $chckRights = $('.chckRights');

                    var MenuIdsChecked = [];

                    $.each(nodes, function (index, value) {
                        var menuId = value.id;

                        $.each($chckRights, function (index, value) {
                            var dataMenuId = $(this).attr('data-menuid');

                            var $chck = $(this);

                            if (dataMenuId == menuId) {
                                MenuIdsChecked.push(menuId);
                                if (menuId == CheckedUncheckedNodeId) {
                                    IsUnchekced = true;
                                }
                                $chck.prop('checked', false);
                            }
                        });
                    });
                    //Uncheck all the nodes which is not checked

                    if (!IsUnchekced) {

                        //If single node checked
                        if (CheckedUncheckedNodeId > 0) {
                            $.each($chckRights, function (index, value) {
                                var dataMenuId = $(this).attr('data-menuid');

                                var $chck = $(this);

                                if (dataMenuId == CheckedUncheckedNodeId) {
                                    $chck.prop('checked', true);
                                }
                            });
                        }
                        //If single node checked
                        else {
                            var childrenNode = $('#ulMenuTree').tree('getChildren', node.target);
                            $.each(childrenNode, function (index, value) {

                                var flagValue = true;

                                for (var i = 0; i < MenuIdsChecked.length; i++) {
                                    if (MenuIdsChecked[i] == value.id) {
                                        flagValue = false;
                                        break;
                                    }
                                }

                                if (flagValue) {
                                    $.each($chckRights, function (index, value1) {
                                        var dataMenuId = $(this).attr('data-menuid');

                                        var $chck = $(this);

                                        if (dataMenuId == value.id) {
                                            $chck.prop('checked', true);
                                        }
                                    });
                                }
                            });
                        }
                    }

                    CheckFire = false;
                    GenerateData();
                    CheckFire = true;
                }
            }
        });

        if ($('#hdnMessage').val()) {
            jAlert($('#hdnMessage').val());
        }

        $('.chckRights').click(function () {
            CheckFire = false;
            GenerateData();
            SelectrightData();
            CheckListgenerator();
             CheckFire = true;
        });

        $('#btnTagAll').click(function (e) {
            e.preventDefault();
            CheckFire = false;
            $('.chckRights').prop('checked', true);
            GenerateData();
            CheckFire = true;
        });

        $('#btnUnTagAll').click(function (e) {
            e.preventDefault();
            CheckFire = false;
            $('.chckRights').prop('checked', false);
            $('.tree-checkbox').prop('checked', false);
            GenerateData();
            CheckFire = true;
        });
    });

    

    function CheckSelectedValues() {
        var $rightChecked = $('.chckRights');
        var GroupUserRights = $('#GroupUserRights').val();
        if (GroupUserRights) {
            var SubMenuWithRights = GroupUserRights.split('_');
            for (var i = 0; i < SubMenuWithRights.length; i++) {
                var SubMenuId = SubMenuWithRights[i].split('^')[0];
                var rights = SubMenuWithRights[i].split('^')[1].split('|');

                if (rights && rights.length > 0) {
                    $.each($rightChecked, function (index, value) {
                        var $chck = $(this);
                        var menuid = $chck.attr('data-menuid');
                        if (menuid == SubMenuId) {
                            var role = $chck.attr('data-id');

                            for (var j = 0; j < rights.length; j++) {
                                if (role == rights[j]) {
                                    $chck.prop('checked', true);
                                }
                            }
                        }
                    });
                }
            }
        }
    }
    function SelectrightData() {
        //alert('Hi');
        var $rightChecked = $('.chckRights:checked');

        var subMenuIds = [];

        $.each($rightChecked, function (index, value) {
            var SubMenuId = $(this).attr('data-menuid');
            //  alert(SubMenuId);
            if (subMenuIds && subMenuIds.length > 0) {
                var flagVal = true;
                for (var i = 0; i < subMenuIds.length; i++) {
                    if (subMenuIds[i] == SubMenuId) {
                        flagVal = false;
                        break;
                    }
                }
                if (flagVal) {
                    subMenuIds.push(SubMenuId);
                }
            }
            else {
                subMenuIds.push(SubMenuId);
            }
        });

        if (subMenuIds && subMenuIds.length > 0) {
            // alert('6');
            var MenuWithRole = '';
            for (var i = 0; i < subMenuIds.length; i++) {
                var roleString = '';
                $.each($rightChecked, function (index, value) {
                    var SubMenuId = $(this).attr('data-menuid');
                    var role = $(this).attr('data-id');
                    if (SubMenuId == subMenuIds[i]) {
                        if (roleString == '') {
                            roleString = role;
                        }
                        else {
                            roleString += '|' + role;
                        }
                    }
                });
                if (roleString != '') {
                    if (MenuWithRole != '') {
                        MenuWithRole += '_' + subMenuIds[i] + '^' + roleString;
                    }
                    else {
                        MenuWithRole = subMenuIds[i] + '^' + roleString;
                    }
                }
            }
            $('#GroupUserRights').val(MenuWithRole);
        }
        else {
            $('#GroupUserRights').val('');
        }

        //CheckListgenerator();
    }

    function GenerateData() {
        var $rightChecked = $('.chckRights:checked');

        var subMenuIds = [];

        $.each($rightChecked, function (index, value) {
            var SubMenuId = $(this).attr('data-menuid');

            if (subMenuIds && subMenuIds.length > 0) {
                var flagVal = true;
                for (var i = 0; i < subMenuIds.length; i++) {
                    if (subMenuIds[i] == SubMenuId) {
                        flagVal = false;
                        break;
                    }
                }
                if (flagVal) {
                    subMenuIds.push(SubMenuId);
                }
            }
            else {
                subMenuIds.push(SubMenuId);
            }
        });

        if (subMenuIds && subMenuIds.length > 0) {
            // alert('6');
            var MenuWithRole = '';
            for (var i = 0; i < subMenuIds.length; i++) {
                var roleString = '';
                $.each($rightChecked, function (index, value) {
                    var SubMenuId = $(this).attr('data-menuid');
                    var role = $(this).attr('data-id');
                    if (SubMenuId == subMenuIds[i]) {
                        if (roleString == '') {
                            roleString = role;
                        }
                        else {
                            roleString += '|' + role;
                        }
                    }
                });
                if (roleString != '') {
                    if (MenuWithRole != '') {
                        MenuWithRole += '_' + subMenuIds[i] + '^' + roleString;
                    }
                    else {
                        MenuWithRole = subMenuIds[i] + '^' + roleString;
                    }
                }
            }
            $('#GroupUserRights').val(MenuWithRole);
        }
        else {
            $('#GroupUserRights').val('');
        }

        CheckListgenerator();
    }

    function CheckListgenerator() {
        // alert('5');

        var GroupUserRights = $('#GroupUserRights').val();
        var nodes = $('#ulMenuTree').tree('getChecked');
        //$.each(nodes, function (index, value) {
        //    var node = $('#ulMenuTree').tree('find', value.id);
        //    $('#ulMenuTree').tree('uncheck', node.target);
        //});
        if (GroupUserRights) {
            var SubMenuWithRights = GroupUserRights.split('_');
            for (var i = 0; i < SubMenuWithRights.length; i++) {
                var SId = SubMenuWithRights[i].split('^')[0];
                var node = $('#ulMenuTree').tree('find', SId);
                if (node) {
                    $('#ulMenuTree').tree('check', node.target);
                }
            }
        }
    }

    function ConfirmToDelete() {
        var value = confirm('Are you sure you want to delete this group?');
        return value;
    }
</script>
<style>
    #RequiredFieldValidator1 {
        position: absolute;
        right: 1px;
        top: 5px;
    }

    .scroller1, .scroller2 {
        overflow: scroll;
        width: 100%;
    }

    .scroller1 {
        height: 20px;
    }

    .scroller2 {
        height: 500px;
    }

    .scroller1 .div1 {
        width: 2000px;
        height: 20px;
    }

    .mxWd {
        max-width: 100%;
    }

    .ovX {
        overflow-x: hidden;
    }

    .bdWhite {
        background: #fff;
        /*Rev 1.0*/
        border-radius: 10px;
        /*Rev end 1.0*/
    }

    .form-group input[type=text] {
        border-radius: 4px !important;
        height: 34px;
    }

    .scroller2 {
        overflow: auto;
    }
</style>
<script>
    $(function () {
        $(".scroller1").scroll(function () {
            $(".scroller2")
                .scrollLeft($(".scroller1").scrollLeft());
        });
        $(".scroller2").scroll(function () {
            $(".scroller1")
                .scrollLeft($(".scroller2").scrollLeft());
        });
      
    });
</script>
<script>

    function SecurityRolesClose() {
        window.location.href = '/SecurityRoles/SecurityRolesList';
    }
    function GenerateMenus() {

    $.ajax({
        type: "POST",
        url: "@Url.Action("GenerateMenus", "SecurityRoles")",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async:false,
        success: function (response) {
            document.getElementById('dvTreeMenus').innerHTML = response;

        }
        });
    }
    function SelectrightData() {
        //alert('Hi');
        var $rightChecked = $('.chckRights:checked');

        var subMenuIds = [];

        $.each($rightChecked, function (index, value) {
            var SubMenuId = $(this).attr('data-menuid');
            //  alert(SubMenuId);
            if (subMenuIds && subMenuIds.length > 0) {
                var flagVal = true;
                for (var i = 0; i < subMenuIds.length; i++) {
                    if (subMenuIds[i] == SubMenuId) {
                        flagVal = false;
                        break;
                    }
                }
                if (flagVal) {
                    subMenuIds.push(SubMenuId);
                }
            }
            else {
                subMenuIds.push(SubMenuId);
            }
        });

        if (subMenuIds && subMenuIds.length > 0) {
            // alert('6');
            var MenuWithRole = '';
            for (var i = 0; i < subMenuIds.length; i++) {
                var roleString = '';
                $.each($rightChecked, function (index, value) {
                    var SubMenuId = $(this).attr('data-menuid');
                    var role = $(this).attr('data-id');
                    if (SubMenuId == subMenuIds[i]) {
                        if (roleString == '') {
                            roleString = role;
                        }
                        else {
                            roleString += '|' + role;
                        }
                    }
                });
                if (roleString != '') {
                    if (MenuWithRole != '') {
                        MenuWithRole += '_' + subMenuIds[i] + '^' + roleString;
                    }
                    else {
                        MenuWithRole = subMenuIds[i] + '^' + roleString;
                    }
                }
            }
            $('#GroupUserRights').val(MenuWithRole);
        }
        else {
            $('#GroupUserRights').val('');
        }

        //CheckListgenerator();
    }
    function EntrySave(mode) {
        SelectrightData();
        savemode = mode;
        
        if ($("#grp_name").val().trim() == "") {
            // SweetAlert for empty category name
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Please Enter Security Role to proceed'
            });
            return false;
        }



        var data = {
            UserGroupRights: $('#GroupUserRights').val(),
            grp_segmentId: 1,
            grp_name: $('#grp_name').val(),
            grp_id: $("#hdnAdd").val()
        }

        $.ajax({
            type: "POST",
            url: "@Url.Action("SaveSecurityRoles", "SecurityRoles")",
            data: JSON.stringify({ Details: data }), // Fixed JSON formatting
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            //async:false,
            success: function (response) {
                if (response != null) {
                    var Sucess = response.split('~')[0];
                    var DetailsID = response.split('~')[1];                    
                    var Message = response.split('~')[2];

                   // $('#hdnDetailsID').val(DetailsID);

                    if (DetailsID > 0 ) {                      
                        DetailsID = 0;

                        Swal.fire({
                            title: 'Success!',
                            /*text: 'Sales Target Number: ' + TargetNo + ' saved successfully.',*/
                            html: 'Security Role saved successfully.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                if (savemode === "Exit") {
                                    setTimeout(function () {
                                        var url = '/SecurityRoles/SecurityRolesList';
                                        window.location.href = url;
                                    }, 500);
                                }
                            }
                        });

                    } else {
                        DetailsID = 0;
                        savemode = "";

                        Swal.fire({
                            title: 'Error!',
                            text: 'Please try again later.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });

                        return false;
                    }
                    Message = "";
                }

            }
        });

    }

    function CancelAdd() {
        if ($("#hdnAdd").val() == "0") {
            Swal.fire({
                title: 'Are you sure you want to Close with out save data.?',
                text: "This action cannot be undone!",
                imageUrl: '/assests/images/delete-big.png', // Custom icon for confirmation
                imageWidth: 40, // Adjust the width as needed
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'No'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/SecurityRoles/SecurityRolesList';

                }
            });
        }

        else {
            window.location.href = '/SecurityRoles/SecurityRolesList';
        }

    }

   

</script>
<div class="breadCumb" style="padding-bottom:39px !important">
    <span id="headertitle">Add Security Role</span>
    <div id="ApprovalCross" onclick="SecurityRolesClose()" class="crossBtnN"><i class="fa fa-times"></i></div>
</div>

<div class="container">
    <div class="form_main backBox p-3 mb-3">
        <div class="form-horizontal" style="padding: 10px;">
            <div class="row">
                @*<div class="col-sm-6 mb-3">*@
                <div class=" col-sm-3">
                    <label>Security Role<span style="color:red">*</span></label>
                    <div class="relative">
                        @Html.TextBoxFor(m => m.grp_name, new { @class = "form-control", @MaxLength = "100" })
                    </div>
                </div>
                <div class="col-sm-4 mt-25">
                    <button type="button" class="btn btn-success  save-btn" onclick="EntrySave('Exit');"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save and Exit</button>
                    <button type="button" class="btn btn-cancel cancel-catg" onclick="CancelAdd()"><span class="btn-icon"><img src="../../../assests/images/cancel.svg"></span> Cancel & Exit</button>

                </div>
                @*</div>*@
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="  col-sm-12 clearfix p-0 mt-4">
                        <div class="col-sm-3 divDown">
                            <input type="button" class="btn btn-primary" id="btnTagAll" value="Tag All" />&nbsp;
                            <input type="button" class="btn btn-warning " id="btnUnTagAll" value="Untag All" />
                            <input type="hidden" value="@Model.UserGroupRights" id="GroupUserRights" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row px-3">
                <div class="scroller1">
                    <div class="div1">
                    </div>
                </div>
                <div class="form-group scroller2" style="">
                    <div class="col-sm-12" id="dvTreeMenus" runat="server" style="width:2000px;">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <asp:HiddenField ID="hdnMessage" ClientIDMode="Static" runat="server" />
    <input type="hidden" value="0" id="hdnAdd" />
    <input type="hidden" id="hdnCloseAdd" />
</div>