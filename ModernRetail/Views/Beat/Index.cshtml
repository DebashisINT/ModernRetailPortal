@**************************************************************************************************************************************************
    Written by Sanchita on 10/01/2025 for Modern Retail - Group/Beat module
***************************************************************************************************************************************************@

@using ModernRetail.Models;
@model ModernRetail.Models.BeatModel
@{
    ViewBag.Title = "Group/Beat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script>
    function AddBeat() {
        $("#hdnID").val('0');
        $("#txtCode").val('');
        $("#txtName").val('');
        $("#ddlAreaB").val('0');
        $("#ddlRoute").val('0');
        $("#dvlblBeatCode").hide();
        $("#dvtxtBeatCode").show();
        $("#dvtxtLblBeatCode").show();
        $("#beatModal").modal('show')
    }

    function EditClick(ID, CODE_TYPE) {
        $("#hdnID").val(ID);
        $("#hdnCODE_TYPE").val(CODE_TYPE);
        $.ajax({
            type: "POST",
            url: "@Url.Action("EditGroupBeat", "Beat")",
            data: { id: ID, type: CODE_TYPE },
            success: function (response) {

                if (response.code == "") {
                    //jAlert('No data found');
                    Swal.fire({
                        icon: 'warning',
                        title: 'Sorry!',
                        text: 'No data found.'
                    });
                }
                else {
                    if (CODE_TYPE == "AREA") {
                        $("#txtAreaCode").val(response.code)
                        $("#txtAreaName").val(response.name)
                        $("#dvlblAreaCode").show();
                        $("#dvtxtAreaCode").hide();
                        $("#dvtxtLblAreaCode").hide();
                        $("#lblAreaCode").html(response.code);
                        $("#areaModal").modal('show')
                    }
                    else if (CODE_TYPE == "ROUTE") {
                        $("#txtRouteCode").val(response.code)
                        $("#txtRouteName").val(response.name)
                        $("#ddlArea").val(response.area);
                        $("#dvlblRouteCode").show();
                        $("#dvtxtRouteCode").hide();
                        $("#dvtxtLblRouteCode").hide();
                        $("#lblRouteCode").html(response.code);
                        $("#routeModal").modal('show')
                    }
                    else if (CODE_TYPE == "BEAT") {
                        $("#txtCode").val(response.code)
                        $("#txtName").val(response.name)
                        $("#ddlAreaB").val(response.area);
                        $("#ddlRoute").val(response.route);
                        $("#dvlblBeatCode").show();
                        $("#dvtxtBeatCode").hide();
                        $("#dvtxtLblBeatCode").hide();
                        $("#lblBeatCode").html(response.code);
                        $("#beatModal").modal('show')
                    }
                }
            }
        });
    }

    function SaveBeat() {
        var id = $("#hdnID").val();
        if ($("#txtCode").val().trim() == "") {
            //jAlert('Enter code to proceed.');
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Enter code to proceed.'
            });
            return false;
        }
        else if ($("#txtName").val().trim() == "") {
            //jAlert("Enter name to proceed.");
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Enter name to proceed.'
            });
            return false;
        }
        //else if ($("#ddlAreaB").val() == "0") {
        //    jAlert("Select area to proceed.");
        //    return false;
        //}
        else if ($("#ddlRoute").val() == "0") {
            //jAlert("Select route to proceed.");
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Select route to proceed.'
            });
            return false;
        }
        else {
            $.ajax({
                type: "POST",
                url: "@Url.Action("SaveGroupBeat", "Beat")",
                data: { code: $("#txtCode").val(), name: $("#txtName").val(), id: id, route: $("#ddlRoute").val()  },
                success: function (response) {
                    if (parseInt(response) > 0) {
                        //jAlert('Saved successfully.');
                        //$("#beatModal").modal('hide');
                        //gridList.Refresh();

                        //if (confirm("Beat saved successfully.")) {
                        //    $("#beatModal").modal('hide');
                        //    //gridList.Refresh();
                        //    location.reload();
                        //}
                        Swal.fire({
                            title: 'Success!',
                            html: 'Beat saved successfully.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $("#beatModal").modal('hide');
                                location.reload();
                            }
                        });
                    }
                    else if (parseInt(response) == -1)
                    //jAlert('Beat code already exists.')
                        Swal.fire({
                            icon: 'warning',
                            title: 'Sorry!',
                            text: 'Beat code already exists.'
                        });
                }
            });
        }
    }

    /*Mantis Issue 25536, 25535, 25542, 25543, 25544*/
    function AddArea() {
        $("#hdnID").val('0');
        $("#txtAreaCode").val('');
        $("#txtAreaName").val('');
        $("#dvlblAreaCode").hide();
        $("#dvtxtAreaCode").show();
        $("#dvtxtLblAreaCode").show();
        $("#areaModal").modal('show')
    }

    function AddRoute() {
        $("#hdnID").val('0');
        $("#txtRouteCode").val('');
        $("#txtRouteName").val('');
        $("#ddlArea").val('0');
        $("#dvlblRouteCode").hide();
        $("#dvtxtRouteCode").show();
        $("#dvtxtLblRouteCode").show();
        $("#routeModal").modal('show')

        @*$.ajax({
                type: "POST",
                url: "@Url.Action("getAreaList", "Beat")",
               // data: { code: $("#txtAreaCode").val(), name: $("#txtAreaName").val(), id: id },
                success: function (response) {
                    $("#routeModal").modal('show')
                }
        });*@


    }

    function SaveArea() {
        var id = $("#hdnID").val();
        if ($("#txtAreaCode").val().trim() == "") {
            //jAlert('Enter area code to proceed.');
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Enter area code to proceed.'
            });
            return false;
        }
        else if ($("#txtAreaName").val().trim() == "") {
            //jAlert("Enter area name to proceed.");
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Enter area name to proceed.'
            });
            return false;
        }
        else {
            $.ajax({
                type: "POST",
                url: "@Url.Action("SaveArea", "Beat")",
                data: { code: $("#txtAreaCode").val(), name: $("#txtAreaName").val(), id: id },
                success: function (response) {
                    if (parseInt(response) > 0) {
                        //jAlert('Area saved successfully.');
                        //if (confirm("Area saved successfully.")) {
                        //    $("#areaModal").modal('hide');
                        //    //gridList.Refresh();
                        //    location.reload();
                        //}
                        Swal.fire({
                            title: 'Success!',
                            html: 'Area saved successfully.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $("#areaModal").modal('hide');
                                location.reload();
                            }
                        });
                    }
                    else if (parseInt(response) == -1)
                    //jAlert('Area code already exists.')
                    Swal.fire({
                        icon: 'warning',
                        title: 'Sorry!',
                        text: 'Area code already exists.'
                    });
                }
            });
        }
    }

    function SaveRoute() {
        var id = $("#hdnID").val();
        if ($("#txtRouteCode").val().trim() == "") {
            //jAlert('Enter route code to proceed.');
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Enter route code to proceed.'
            });
            return false;
        }
        else if ($("#txtRouteName").val().trim() == "") {
            //jAlert("Enter route name to proceed.");
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Enter route name to proceed.'
            });
            return false;
        }
        else if ($("#ddlArea").val() == "0") {
            //jAlert("Select area to proceed.");
            Swal.fire({
                icon: 'warning',
                title: 'Sorry!',
                text: 'Select area to proceed.'
            });
            return false;
        }
        else {
            $.ajax({
                type: "POST",
                url: "@Url.Action("SaveRoute", "Beat")",
                data: { code: $("#txtRouteCode").val(), name: $("#txtRouteName").val(), area: $("#ddlArea").val(), id: id },
                success: function (response) {
                    if (parseInt(response) > 0) {
                        //jAlert('Route saved successfully.');
                        //$("#routeModal").modal('hide');
                        //gridList.Refresh();
                        //if (confirm("Route saved successfully.")) {
                        //    $("#routeModal").modal('hide');
                        //    //gridList.Refresh();
                        //    location.reload();
                        //}

                        Swal.fire({
                            title: 'Success!',
                            html: 'Route saved successfully.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $("#routeModal").modal('hide');
                                location.reload();
                            }
                        });
                    }
                    else if (parseInt(response) == -1)
                    //jAlert('Route code already exists.')
                        Swal.fire({
                            icon: 'warning',
                            title: 'Sorry!',
                            text: 'Route code already exists.'
                        });
                }
            });
        }
    }
    /*End of Mantis Issue 25536, 25535, 25542, 25543, 25544*/

    function beginUsergridcallback(s, e) {
        e.customArgs["id"] = $("#hdnID").val();
    }
    function AssignUserClick(ID) {
        $("#hdnID").val(ID);
        $("#usermapModal").modal('show');
        // Mantis Issue 25160
        //gridUserList.Refresh();
        //var unselect = [];
        //gridUserList.SelectRowsByKey(unselect)
        gridUserList.UnselectRows();
        // End of Mantis Issue 25160
        $.ajax({
            type: "POST",
            url: "@Url.Action("SetUsers", "Beat")",
            data: { ID: ID },
            success: function (response) {
                if (response.length > 0) {
                    // Mantis Issue 25160
                    //gridUserList.SelectRowsByKey(response)
                    setTimeout(function () {
                        gridUserList.SelectRowsByKey(response)
                    }, 2000)
                    // End of Mantis Issue 25160
                }
            }
        });


    }

    function SaveUserBeat() {
        var id = $("#hdnID").val();
        gridUserList.GetSelectedFieldValues("user_id", function (str) {
            var selected = str.join(",");
            $.ajax({
                type: "POST",
                url: "@Url.Action("SaveGroupBeatUser", "Beat")",
                data: { selected: selected, id: id },
                success: function (response) {
                    if (parseInt(response) > 0) {
                        //jAlert('Saved successfully.');
                        Swal.fire({
                            icon: 'warning',
                            title: 'Success!',
                            text: 'Saved successfully.'
                        });
                        $("#usermapModal").modal('hide');
                        gridList.Refresh();
                    }
                    else if (parseInt(response) == -1)
                    //jAlert('Code already exists.')
                        Swal.fire({
                            icon: 'warning',
                            title: 'Sorry!',
                            text: 'Code already exists.'
                        });
                }
            });
        });
    }

    // Mantis Issue 25536, 25535, 25542, 25543, 25544 [ CODE_TYPE added ]
    function DeleteClick(ID, CODE_TYPE) {
    $("#hdnID").val(ID);
    /* Updated SweetAlert instead of jConfirm */
    Swal.fire({
        title: 'Are you sure you want to delete?',
        text: "This action cannot be undone!",
        imageUrl: '/assests/images/delete-big.png', // Custom icon for confirmation
        imageWidth: 40, // Adjust the width as needed
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("Delete", "Beat")",
                data: { ID: ID, type: CODE_TYPE },
                success: function (response) {
                    if (parseInt(response) > 0) {
                        // Show success message
                        Swal.fire({
                            title: 'Success!',
                            text: 'Deleted successfully.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    } else if (parseInt(response) == -1) {
                        // Show specific error messages based on CODE_TYPE
                        let errorMessage = '';
                        if (CODE_TYPE === "AREA") {
                            errorMessage = 'Area mapped with Route/Beat. Cannot delete.';
                        } else if (CODE_TYPE === "ROUTE") {
                            errorMessage = 'Route mapped with Beat. Cannot delete.';
                        } else {
                            errorMessage = 'Delete failed.';
                        }
                        Swal.fire({
                            icon: 'warning',
                            title: 'Sorry!',
                            text: errorMessage
                        });
                    }
                },
                error: function () {
                    // Show error if AJAX request fails
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'Something went wrong. Please try again later.'
                    });
                }
            });
        }
    });
}


     function DownloadFormat()
     {
        var url = '@Url.Action("DownloadFormat", "Beat")'
        window.location.href = url;
    }

     function ImportBeatPopOpen() {
         $("#myImportModal").modal('show');
     }

     function ClickToImportBeat() {
         todate = null;
         fromdate = null;
         var isprocess = false;
         var filename = $("#fileprod").val();
         if ($('#fileprod').get(0).files.length === 0) {
             //jAlert("No files selected.");
             //Swal.fire({
             //    icon: 'warning',
             //    title: 'Warning',
             //    text: 'No files selected.'
             //});

             return false;
         }
         else {
             var extension = filename.replace(/^.*\./, '');
             switch (extension.toLowerCase()) {
                 case 'xls':
                     isprocess = true;
                 case 'xlsx':
                     isprocess = true;
                 default:
                     // Cancel the form submission
                     if (!isprocess) {
                         jAlert('Only excel file require.');
                         //Swal.fire({
                         //    icon: 'warning',
                         //    title: 'Warning',
                         //    text: 'Only excel file require.'
                         //});

                         return false;
                     }
             }
         }

         if (isprocess == true) {
             var fileUpload = $("#fileprod").get(0);
             var files = fileUpload.files;

             // Create FormData object
             var fileData = new FormData();

             // Looping over all files and add it to FormData object
             for (var i = 0; i < files.length; i++) {
                 fileData.append(files[i].name, files[i]);
             }


             $.ajax({
                 url: "@Url.Action("ImportExcel", "Beat")",
                 type: "POST",
                 contentType: false,
                 processData: false,
                 data: fileData,
                 success: function (result) {
                     jAlert(result, 'Alert', function () {
                         $("#fileprod").val('');
                         //$("#myImportModal").toggle();
                         $("#myImportModal").modal('hide');
                         //gridList.Refresh();

                         $.ajax({
                             type: "POST",
                             url: "@Url.Action("BeatImportLog", "Beat")",
                             success: function (response) {
                                 if (response) {
                                     pcModalBeatImportLogMode.Show();
                                     gridBeatImportLog.Refresh();
                                     gridBeatImportLog.Refresh();
                                 }
                             }
                         });
                     });

                 },
                 error: function (err) {
                     jAlert(err.statusText);
                     //Swal.fire({
                     //    icon: 'error',
                     //    title: 'Sorry!',
                     //    text: err.statusText
                     //});
                 }
             });
         }
     }

     function ImportLogPopOpen() {
         var d = new Date();

         dtLogFrom_Import.SetValue(d);
         dtLogTo_Import.SetValue(d);

         pcModalImportViewMode.Show();
    }

    function CloseLog() {
        location.reload();
    }

    function BeatImportUserLog() {
        var url = '/Beat/BeatImportManualLog/';
        $.ajax({
            type: "POST",
            url: url,
            data: JSON.stringify({ 'Fromdt': dtLogFrom_Import.GetText(), 'ToDate': dtLogTo_Import.GetText() }),
            async: false,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                console.log(response);
                if (response == "True") {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("BeatImportLog", "Beat")",
                        success: function (response) {
                            if (response) {
                                pcModalImportViewMode.Hide();
                                pcModalBeatImportLogMode.Show();
                                gridBeatImportLog.Refresh();
                                gridBeatImportLog.Refresh();
                            }
                        }
                    });
                }
                else {
                   jAlert(response);
                   //Swal.fire({
                   //    icon: 'error',
                   //    title: 'Sorry!',
                   //    text: response
                   // });
                }
            },
            error: function (response) {
                console.log(response);
            }
        });
    }
 

     function toggleDropdown() {
        const dropdown = $('#moreOptions');
        if (dropdown.hasClass('show')) {
            dropdown.removeClass('show').slideUp(1000);;
        } else {
            dropdown.addClass('show').slideDown(1000);
        }
    }

    $(document).on('click', function (e) {
        if (!$(e.target).closest('#btnMore, #moreOptions').length) {
            $('#moreOptions').removeClass('show').slideUp(1000);
        }
    });


 
function gridRowclick(s, e) {
    $('#gridList').find('tr').removeClass('rowActive');


    $(s.GetRow(e.visibleIndex)).addClass('rowActive');



    $('.action-buttons').removeClass('visible').hide();


    var rowElement = $('#gridList_DXDataRow' + e.visibleIndex);


    var actionButtons = $(rowElement).find('.action-buttons');


    var rowOffset = $(rowElement).offset();


    //actionButtons.css({
    //    top: rowOffset.top,
    //    left: rowOffset.left + ($(rowElement).outerWidth() / 2) - (actionButtons.outerWidth() / 2),
    //    zIndex: 9999
    //});


    actionButtons.addClass('visible').fadeIn(200);

}

$(document).on('click', function (e) {
    if (!$(e.target).closest('.action-buttons, .dxgvDataRow').length) {
        $('.action-buttons').hide();
    }
});

</script>

<style>
        .modal-header {
            padding: 8px;
            background: #094e8c;
            border-radius: 8px 8px 0 0;
        }

        button.close {
            color: #fff;
            font-weight: 300;
            opacity: .5;
        }

        .close:hover, .close:focus {
            color: #fff;
            opacity: 1;
        }

        .modal-content {
            border-radius: 10px;
        }

        .modal-footer {
            padding: 10px 20px 10px;
        }

        .dxgvLoadingPanel_PlasticBlue {
            left: 42% !important;
        }
        #gridUserList {
            width: 100% !important;
            max-width: 100% !important;
        }
        
        #BranchGridLookup {
            min-height: 34px;
            border-radius: 5px;
        }

        .dxeButtonEditButton_PlasticBlue {
            background: #094e8c !important;
            border-radius: 4px !important;
            padding: 0 4px !important;
        }

        .chosen-container-single .chosen-single div {
            background: #094e8c;
            color: #fff;
            border-radius: 4px;
            height: 30px;
            top: 1px;
            right: 1px;
            /*position:relative;*/
        }

            .chosen-container-single .chosen-single div b {
                display: none;
            }

            .chosen-container-single .chosen-single div::after {
                content: '<';
                position: absolute;
                top: 2px;
                right: 3px;
                font-size: 18px;
                transform: rotate(269deg);
                font-weight: 500;
            }

        .chosen-container-active.chosen-with-drop .chosen-single div {
            background: #094e8c;
            color: #fff;
        }

            .chosen-container-active.chosen-with-drop .chosen-single div::after {
                transform: rotate(90deg);
                right: 5px;
            }

        .calendar-icon {
            position: absolute;
            bottom: 8px;
            right: 14px;
            z-index: 0;
            cursor: pointer;
        }

        .date-select .form-control {
            position: relative;
            z-index: 1;
            background: transparent;
        }

        #ddlState, #ddlPartyType, #divoutletStatus, #slmonth, #slyear {
            -webkit-appearance: none;
            position: relative;
            z-index: 1;
            background-color: transparent;
        }

        .h-branch-select {
            position: relative;
        }

            .h-branch-select::after {
                content: '<';
                position: absolute;
                top: 8px;
                right: -2px;
                font-size: 18px;
                transform: rotate(270deg);
                font-weight: 500;
                background: #094e8c;
                color: #fff;
                height: 18px;
                display: block;
                width: 28px;
                /* padding: 10px 0; */
                border-radius: 4px;
                text-align: center;
                line-height: 19px;
                z-index: 0;
            }

        .multiselect.dropdown-toggle {
            text-align: left;
        }

        .multiselect.dropdown-toggle, #ddlMonth, #ddlYear {
            -webkit-appearance: none;
            position: relative;
            z-index: 1;
            background-color: transparent;
        }

        .whclass.selectH {
            padding-right: 30px;
        }

        #ddlShowReport:focus-visible {
            box-shadow: none;
            outline: none;
            border: 1px solid #164f93;
        }

        #ddlShowReport:focus {
            border: 1px solid #164f93;
        }

        .whclass.selectH:focus-visible {
            outline: none;
        }

        .whclass.selectH:focus {
            border: 1px solid #164f93;
        }

        .dxeButtonEdit_PlasticBlue {
            border: 1px Solid #ccc;
        }

        .chosen-container-single .chosen-single {
            border: 1px solid #ccc;
            background: #fff;
            box-shadow: none;
        }

        .daterangepicker td.active, .daterangepicker td.active:hover {
            background-color: #175396;
        }

        label {
            font-weight: 500;
        }

        .dxgvHeader_PlasticBlue {
            background: #164f94;
        }

        .dxgvSelectedRow_PlasticBlue td.dxgv {
            color: #fff;
        }

        .dxeCalendarHeader_PlasticBlue {
            background: #185598;
        }

        .dxgvControl_PlasticBlue, .dxgvDisabled_PlasticBlue,
        .dxbButton_PlasticBlue,
        .dxeCalendar_PlasticBlue,
        .dxeEditArea_PlasticBlue {
            font-family: 'Poppins', sans-serif !important;
        }

        .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
            font-weight: 500;
        }

        .btnPadding .btn {
            padding: 7px 14px !important;
            border-radius: 4px;
        }

        .btnPadding {
            padding-top: 24px !important;
        }

        .dxeButtonEdit_PlasticBlue {
            border-radius: 5px;
            height: 34px;
        }

        #dtFrom, #dtTo {
            position: relative;
            z-index: 1;
            background: transparent;
        }

        #tblshoplist_wrapper .dataTables_scrollHeadInner table tr th {
            background: #165092;
            vertical-align: middle;
            font-weight: 500;
        }

        /*#refreshgrid {
            background: #e5e5e5;
            padding: 0 10px;
            margin-top: 15px;
            border-radius: 8px;
        }*/

        .styled-checkbox {
            position: absolute;
            opacity: 0;
            z-index: 1;
        }

            .styled-checkbox + label {
                position: relative;
                /*cursor: pointer;*/
                padding: 0;
                margin-bottom: 0 !important;
            }

                .styled-checkbox + label:before {
                    content: "";
                    margin-right: 6px;
                    display: inline-block;
                    vertical-align: text-top;
                    width: 16px;
                    height: 16px;
                    /*background: #d7d7d7;*/
                    margin-top: 2px;
                    border-radius: 2px;
                    border: 1px solid #c5c5c5;
                }

            .styled-checkbox:hover + label:before {
                background: #094e8c;
            }


            .styled-checkbox:checked + label:before {
                background: #094e8c;
            }

            .styled-checkbox:disabled + label {
                color: #b8b8b8;
                cursor: auto;
            }

                .styled-checkbox:disabled + label:before {
                    box-shadow: none;
                    background: #ddd;
                }

            .styled-checkbox:checked + label:after {
                content: "";
                position: absolute;
                left: 3px;
                top: 9px;
                background: white;
                width: 2px;
                height: 2px;
                box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
                transform: rotate(45deg);
            }

        #dtstate {
            padding-right: 8px;
        }

        .pmsModal .modal-header {
            background: #094e8c !important;
            background-image: none !important;
            padding: 11px 20px;
            border: none;
            border-radius: 5px 5px 0 0;
            color: #fff;
            border-radius: 10px 10px 0 0;
        }

        .pmsModal .modal-content {
            border: none;
            border-radius: 10px;
        }

        .pmsModal .modal-header .modal-title {
            font-size: 14px;
        }

        .pmsModal .close {
            font-weight: 400;
            font-size: 25px;
            color: #fff;
            text-shadow: none;
            opacity: .5;
        }

        #EmployeeTable {
            margin-top: 10px;
        }

            #EmployeeTable table tr th {
                padding: 5px 10px;
            }

        .dynamicPopupTbl {
            font-family: 'Poppins', sans-serif !important;
        }

            .dynamicPopupTbl > tbody > tr > td,
            #EmployeeTable table tr th {
                font-family: 'Poppins', sans-serif !important;
                font-size: 12px;
            }

        .w150 {
            width: 160px;
        }

        .eqpadtbl > tbody > tr > td:not(:last-child) {
            padding-right: 20px;
        }

        #dtFrom_B-1, #dtTo_B-1 {
            background: transparent !important;
            border: none;
            width: 30px;
            padding: 10px !important;
        }

            #dtFrom_B-1 #dtFrom_B-1Img,
            #dtTo_B-1 #dtTo_B-1Img {
                display: none;
            }

        #dtFrom_I, #dtTo_I {
            background: transparent;
        }

        .for-cust-icon {
            position: relative;
            z-index: 1;
        }

        .pad-md-18 {
            padding-top: 24px;
        }

        .open .dropdown-toggle.btn-default {
            background: transparent !important;
        }

        .input-group-btn .multiselect-clear-filter {
            height: 32px;
            border-radius: 0 4px 4px 0;
        }

        .btn .caret {
            display: none;
        }

        .iminentSpan button.multiselect.dropdown-toggle {
            height: 34px;
        }

        .col-lg-2 {
            padding-left: 8px;
            padding-right: 8px;
        }

        select:not(.btn) {
            -webkit-appearance: none;
            position: relative;
            z-index: 1;
            background-color: transparent;
        }

        .dxgvControl_PlasticBlue a {
            margin: 0 3px;
        }

        .dxeButtonDisabled_PlasticBlue {
            background: #ababab !important;
        }

        .red {
            color: red;
        }

        .linerHd {
            background: #4e8fcf !important;
        }

        #popup_message {
            padding-left: 0 !important;
            text-align: center !important;
        }

        #popup_panel {
            margin: 14px 0 5px;
        }

        #popup_ok, #popup_cancel {
            border-radius: 4px !important;
        }
        #gridUserList_DXPagerTop_PSP, #gridUserList_DXPagerBottom_PSP {
            right: 36px !important;
            left: auto !important;
        }
 

        .more-btn .dropdown-menu {
            display: none;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease-in-out;
            position: absolute;
            background-color: #fff;
            border: 1px solid #ddd;
            /*padding: 10px;*/
            border-radius: 10px;
            z-index: 1000;
        }

            .more-btn .dropdown-menu button.btn {
                width: 100%;
                border-radius: 0;
                color: #111;
                background: transparent;
                text-align: left;
                transition: all .3s;
                border-bottom: 1px solid #dadada;
            }

                .more-btn .dropdown-menu button.btn:last-child {
                    border-bottom: none;
                    margin-bottom: 0;
                }

                .more-btn .dropdown-menu button.btn:hover {
                    color: #fff !important;
                    background: #7933d0;
                }

                .more-btn .dropdown-menu button.btn:focus {
                    color: #fff !important;
                    background: #7933d0;
                }

        #moreOptions button .btn-icon {
            margin-right: 5px;
        }

        .more-btn .dropdown-menu.show {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }

        .more-btn {
            position: relative;
        }

        .more-option-buttons {
            background: #893823;
        }

        .btn-icon img {
            width: 22px;
        }

        #moreOptions .btn .btn-icon {
            border-radius: 50px;
            width: 24px;
            height: 24px;
            display: inline-block;
            background: #fff;
            line-height: 23px;
            margin-right: 5px;
            /*color: #054682;*/
            text-align: center;
        }

            #moreOptions .btn .btn-icon img {
                width: 16px;
            }

        .validationDiv {
            margin-bottom: 10px;
        }

        .btn {
            border-radius: 8px;
            height: 38px;
            padding-left: 12px;
            padding-right: 12px;
            color: #fff;
        }

        .add-btn .btn-icon {
            border-radius: 50px;
            width: 21px;
            height: 21px;
            display: inline-block;
            background: #fff;
            line-height: 21px;
            margin-right: 5px;
        }

            .add-btn .btn-icon i {
                color: #238945;
            }



        .pmsModal .modal-header {
            /*background: #094e8c !important;
    background-image: none !important;*/
            padding: 11px 20px;
            border: none;
            border-radius: 15px 15px 0 0 !important;
            /*color: #fff;*/
            /*background: linear-gradient(to right, #1f5fbf, #11998e) !important;*/
        }

        .pmsModal .modal-content {
            border: none;
            background: linear-gradient(1deg, #cff3ff, #ffffff);
        }

        /*.pmsModal .modal-header .modal-title {
        font-size: 14px;
    }*/

        .pmsModal .modal-header .modal-title {
            font-size: 16px !important;
            color: #111;
            font-size: 24px;
        }

        .pmsModal .modal-header {
            background: transparent !important;
            margin-bottom: 10px;
            border-bottom: 1px solid #d5d5d5;
        }

        .close {
            font-size: 34px;
            opacity: .8;
        }

        button.close {
            color: #111 !important;
            font-weight: 400 !important;
            opacity: .8 !important;
            font-size: 32px !important;
        }

        .pmsModal .close {
            font-weight: 400;
            font-size: 25px;
            color: #fff;
            text-shadow: none;
            opacity: .5;
        }

        .h-branch-select {
            background: #fff;
        }


        #btnSave .btn-icon, .cancel-catg .btn-icon {
            border-radius: 50px;
            width: 21px;
            height: 21px;
            display: inline-block;
            background: #fff;
            line-height: 20px;
            margin-right: 5px;
        }

            #btnSave .btn-icon img {
                color: #238945;
                width: 14px;
            }

            .cancel-catg .btn-icon img {
                color: #DC0505;
                width: 16px;
            }

        .cancel-catg:hover {
            transform: scale(1.1);
        }

        .cancel-catg, #btnSave {
            transition: all .3s ease-in-out;
        }

            #btnSave:hover {
                transform: scale(1.1);
            }

        .cancel-catg {
            margin-right: 5px;
        }


        .dxgvEditFormDisplayRow_PlasticBlue td.dxgv, .dxgvDataRow_PlasticBlue td.dxgv, .dxgvDataRowAlt_PlasticBlue td.dxgv, .dxgvSelectedRow_PlasticBlue td.dxgv, .dxgvFocusedRow_PlasticBlue td.dxgv {
            /*overflow: hidden;*/
            word-break: break-word;
        }

        .rowActive {
            background-color: #ebf4ff !important;
            color: #000 !important;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            z-index: 9999;
            display: none; /* Initially hidden */
        }

        .flex-loader {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            width: 100%;
            height: 100%;
        }

        .dxgvLoadingPanel_PlasticBlue {
            display: none !important;
        }

        .flex-loader img {
            width: 120px;
        }

        .flex-loader h4 {
            font-size: 22px;
            color: #000000;
        }

        .btn-export {
            background: #d0d0d0;
        }

            .btn-export .btn-icon img {
                width: 30px;
                height: 30px;
            }


        input:focus, textarea:focus, select:focus {
            outline: none;
        }

        .select2-container {
            width: 100% !important;
            z-index: 99999;
        }

        .select2-container--default .select2-selection--single {
            height: 34px;
            /* padding: 6px 12px; */
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 6px;
        }

        /*.select2-container {
        z-index: 1;
    }*/

        .select2-container--default .select2-selection--single {
            background-color: transparent;
        }

            .select2-container--default .select2-selection--single .select2-selection__arrow {
                display: none;
            }

        .select2-container--default .select2-search--dropdown .select2-search__field {
            border-radius: 4px;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 32px;
            padding-right: 22px;
        }


        #gridList {
            position: relative;
        }

        .action-buttons {
            display: none;
            position: absolute;
            /*background: #ffffff;*/
            /*border: 1px solid #ddd;*/
            border-radius: 5px;
            padding: 5px 10px;
            /*box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);*/
            white-space: nowrap;
            z-index: 1000; /* Ensure it appears above other elements */
            transform: translate(-50%, -100%); /* Position above and centered horizontally */
            transition: opacity 0.3s ease; /* Smooth fade-in effect */
            top: 85px;
            right: -45px;
        }

            .action-buttons.visible {
                display: block !important; /* Add this class dynamically */
            }


            .action-buttons a {
                color: #007bff;
                text-decoration: none;
                font-size: 14px;
                cursor: pointer;
            }

                .action-buttons a img {
                    width: 30px;
                    height: 30px;
                }

                .action-buttons a:hover {
                    text-decoration: underline;
                }

        .swal2-styled {
            border-radius: 12px !important;
            padding: 8px 20px !important;
            color: #fff !important;
            font-size: 14px !important;
        }

        .swal2-html-container {
            margin-top: 5px !important;
        }

        div:where(.swal2-container) button:where(.swal2-styled):not([disabled]) {
            width: 90px !important;
            border-radius: 8px !important;
        }

        div:where(.swal2-container).swal2-backdrop-show, div:where(.swal2-container).swal2-noanimation {
            background: rgb(0 0 0 / 50%) !important;
        }

        div:where(.swal2-container).swal2-center > .swal2-popup {
            background: linear-gradient(1deg, #cff3ff, #ffffff);
        }

        .swal2-confirm.swal2-styled {
            border-radius: 8px !important;
        }

        .tooltip-container {
            position: relative;
            display: inline-block;
        }

        .tooltip {
            visibility: hidden;
            /*width: 140px;*/
            background-color: #0d8f24;
            color: #fff;
            text-align: center;
            border-radius: 10px;
            padding: 8px 10px;
            position: absolute;
            z-index: 99;
            bottom: 130%;
            left: 42%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            word-break: keep-all;
        }

            .tooltip::after {
                content: '';
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -10px;
                border-width: 10px;
                border-style: solid;
                border-color: #0d8f24 transparent transparent transparent;
            }

        .tooltip-container:hover .tooltip {
            visibility: visible;
            opacity: 1;
        }

        @@media only screen and (max-width: 768px) {


            #ddlAppIds .tooltip {
                display: none;
            }
        }
</style>

<div class="breadCumb">
    <span>Group/Beat</span>
</div>
<div class="container">
    <div class="form_main backBox p-3">
        <div class="d-flex">
            <div class="mr-3">
                <button type="button" id="btnAdd" class="btn btn-success add-btn" onclick="AddArea()"><span class="btn-icon"><i class="fa fa-plus"></i></span> Add Area</button>
            </div>
            <div class="mr-3">
                <button type="button" id="btnAdd" class="btn btn-success add-btn" onclick="AddRoute()"><span class="btn-icon"><i class="fa fa-plus"></i></span> Add Route</button>
            </div>
            <div class="mr-3">
                <button type="button" id="btnAdd" class="btn btn-success add-btn" onclick="AddBeat()"><span class="btn-icon"><i class="fa fa-plus"></i></span> Add Beat</button>
            </div>


            <div class="mr-3 more-btn">
                <button type="button" id="btnMore" class="btn more-option-buttons tooltip-container" onclick="toggleDropdown()">
                    <span class="btn-icon"><img src="../../../assests/images/more-btns.svg"></span>
                    <div class="tooltip">More Options</div>
                </button>
                <div id="moreOptions" class="dropdown-menu">
                    @*@if (ViewBag.CanBulkUpdate)
                        {*@

                    <button type="button" class="btn btn-info btn-clr-3" onclick="DownloadFormat();">
                        <span class="btn-icon"><img src="../../../assests/images/download-format.svg"></span> Download Format
                    </button>



                    <button type="button" class="btn btn-primary btn-clr-4" onclick="ImportBeatPopOpen();">
                        <span class="btn-icon"><img src="../../../assests/images/file-import.svg"></span> Import File
                    </button>

                    <button type="button" class="btn btn-warning btn-clr-5" onclick="ImportLogPopOpen();">
                        <span class="btn-icon"><img src="../../../assests/images/log-files.svg"></span> View Log
                    </button>

                </div>

            </div>
        </div>
        @*}*@
        @*</tr>
                <tr></tr>
            </table>*@
        <br />
        <div class="scrooler">
            <div id="refreshgrid">
                @{
                    Html.RenderAction("PartialGrid", "Beat");
                }
            </div>
        </div>
    </div>
</div>


<div id="beatModal" class="modal pmsModal  fade" data-backdrop="static" role="dialog">
    <div class="modal-dialog" style="width: 500px;">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add/Modify Group/Beat</h4>
            </div>
            <div class="modal-body" style="width: 476px;">
                <div id="divModalBody">
                    <div class="row">
                        <div class="col-md-12">
                            <div id="dvlblBeatCode" style="display:none; margin-bottom:5px;">
                                <label>Code : </label> <label id="lblBeatCode"> </label>
                            </div>
                            <div id="dvtxtLblBeatCode">
                                <label>Code <span class="red">*</span></label>
                            </div>
                            <div id="dvtxtBeatCode" class="mb-3">
                                <input type="text" id="txtCode" maxlength="100" class="form-control" />
                            </div>
                            <div><label>Name <span class="red">*</span></label></div>
                            <div class="mb-3">
                                <input type="text" id="txtName" maxlength="100" class="form-control" />
                            </div>

                            @*Mantis Issue 25536, 25535, 25542, 25543, 25544*@
                            @*<label>Area <span class="red">*</span></label>
                                <div>
                                    @Html.DropDownListFor(m => m.Area, new SelectList(Model.AreaList, "AreaId", "AreaName", Model.AreaId), new { @id = "ddlAreaB", @class = "form-control" })
                                </div>*@

                            <label>Route <span class="red">*</span></label>
                            <div class="h-branch-select">
                                @Html.DropDownListFor(m => m.Route, new SelectList(Model.RouteList, "RouteId", "RouteName", Model.RouteId), new { @id = "ddlRoute", @class = "form-control" })
                            </div>
                            @*End of Mantis Issue 25536, 25535, 25542, 25543, 25544*@
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="width: 476px;">

                <div>
                    <button type="button" id="btnSave" class="btn btn-success" onclick="SaveBeat()"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save & Exit</button>
                </div>

            </div>
        </div>

    </div>
    <input type="hidden" id="hdnID" />
</div>

@*Mantis Issue 25536, 25535, 25542, 25543, 25544*@
<div id="areaModal" class="modal pmsModal  fade" data-backdrop="static" role="dialog">
    <div class="modal-dialog" style="width: 500px;">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add/Modify Area</h4>
            </div>
            <div class="modal-body" style="width: 476px;">
                <div id="divModalBody">
                    <div class="row">
                        <div class="col-md-12">
                            <div id="dvlblAreaCode" style="display:none; margin-bottom:5px;">
                                <label>Code : </label> <label id="lblAreaCode"> </label>
                            </div>
                            <div id="dvtxtLblAreaCode"><label>Code <span class="red">*</span></label></div>
                            <div id="dvtxtAreaCode" class="mb-3">
                                <input type="text" id="txtAreaCode" maxlength="100" class="form-control" />
                            </div>
                            <div><label>Name <span class="red">*</span></label></div>
                            <div class="mb-3">
                                <input type="text" id="txtAreaName" maxlength="100" class="form-control" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="width: 476px;">

                <div>
                    <button type="button" id="btnSave" class="btn btn-success" onclick="SaveArea()"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save & Exit</button>
                </div>

            </div>
        </div>

    </div>
    <input type="hidden" id="hdnID" />
</div>

<div id="routeModal" class="modal pmsModal  fade" data-backdrop="static" role="dialog">
    <div class="modal-dialog" style="width: 500px;">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add/Modify Route</h4>
            </div>
            <div class="modal-body" style="width: 476px;">
                <div id="divModalBody">
                    <div class="row">
                        <div class="col-md-12">
                            <div id="dvlblRouteCode" style="display:none; margin-bottom:5px;">
                                <label>Code : </label> <label id="lblRouteCode"> </label>
                            </div>
                            <div id="dvtxtLblRouteCode"><label>Code <span class="red">*</span></label></div>
                            <div id="dvtxtRouteCode" class="mb-3">
                                <input type="text" id="txtRouteCode" maxlength="100" class="form-control" />
                            </div>
                            <div><label>Name <span class="red">*</span></label></div>
                            <div class="mb-3">
                                <input type="text" id="txtRouteName" maxlength="100" class="form-control" />
                            </div>
                            <label>Area <span class="red">*</span></label>
                            <div class="h-branch-select">
                                @Html.DropDownListFor(m => m.Area, new SelectList(Model.AreaList, "AreaId", "AreaName", Model.AreaId), new { @id = "ddlArea", @class = "form-control" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="width: 476px;">

                <div>
                    <button type="button" id="btnSave" class="btn btn-success" onclick="SaveRoute()"><span class="btn-icon"><img src="../../../assests/images/save-instagram.svg"></span> Save & Exit</button>
                </div>

            </div>
        </div>

    </div>
    <input type="hidden" id="hdnID" />
</div>

<div id="usermapModal" class="modal pmsModal  fade" data-backdrop="static" role="dialog">
    <div class="modal-dialog" style="width: 780px;">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">User Map</h4>
            </div>
            <div class="modal-body" style="width: auto">
                <div id="divModalBody">
                    @{
                        Html.RenderAction("PartialUserGrid", "Beat", new { id = "0" });
                    }
                </div>
            </div>
            <div class="modal-footer" style="width: auto">

                <div>
                    <button type="button" id="btnSave" class="btn btn-success" onclick="SaveUserBeat()">Map User</button>
                </div>

            </div>
        </div>

    </div>
    <input type="hidden" id="hdnID" />
</div>

<div id="myImportModal" class="modal fade pmsModal w30" data-backdrop="static" role="dialog">
    <div class="modal-dialog ">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" onclick="close()">&times;</button>
                <h4 class="modal-title">Import Excel Template For Beat</h4>
            </div>
            <div class="modal-body">
                <div>
                    <div class="">

                        <div class="row">
                            <div class="col-md-12">
                                <div id="divproduct">
                                    <label class="uplabel mb-4">Select File to Import (Add/Update)</label>
                                    <div><input type="file" id="fileprod" accept=".xls,.xlsx"></div>
                                    <div class="pTop10  mTop5 mt-4"><input type="submit" value="Import (Add/Update)" onclick="return ClickToImportBeat();" id="btnimportxls" class="btn btn-primary"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">

                        </div>
                    </div>

                </div>
            </div>
        </div>

    </div>
</div>

@Html.DevExpress().PopupControl(
    settings =>
    {
        settings.Name = "pcModalBeatImportLogMode";
        settings.Width = 1200; //System.Web.UI.WebControls.Unit.Percentage(80);
        //settings.Height = 220;
        //settings.ScrollBars.v
        settings.AllowDragging = true;
        settings.CloseAction = CloseAction.CloseButton;
        settings.CloseOnEscape = true;
        settings.PopupAnimationType = AnimationType.None;
        settings.HeaderText = "Import Log";
        settings.Modal = true;
        settings.AutoUpdatePosition = true;
        settings.Top = 50;
        settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.PopupVerticalAlign = PopupVerticalAlign.Above;
        settings.ClientSideEvents.CloseButtonClick = "function(s, e) {CloseLog(); }";
        settings.SetContent(() =>
        {
            Html.RenderPartial("BeatImportLog", new List<BeatImportLogModel>());
            // ViewContext.Writer.Write("<button type='button' class='btn btn-primary pull-right mtop8' title='Export To Excel' onclick='ExportImportLogGrid();'>Export</button>");
        });

        //settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true);  }";
    }).GetHtml()

@Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalImportViewMode";
            settings.Width = 300;
            //settings.Height = 220;
            //settings.ScrollBars.v
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.CloseOnEscape = true;
            settings.PopupAnimationType = AnimationType.None;
            settings.HeaderText = "Import Beat Log";
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.Top = 50;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Above;
            settings.SetContent(() =>
            {
                Html.RenderPartial("BeatImportLogManual");
            });

            // settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
        }).GetHtml()
